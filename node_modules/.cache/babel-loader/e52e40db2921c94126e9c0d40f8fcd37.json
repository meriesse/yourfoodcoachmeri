{"ast":null,"code":"import { assert } from '@hapi/hoek';\nimport { ipVersions } from './uri';\n/**\n * Generates a regular expression used to validate IP addresses.\n *\n * @param options - optional settings.\n *\n * @returns an object with the regular expression and meta data.\n */\nexport function ipRegex(options = {}) {\n  // CIDR\n  const cidr = options.cidr || 'optional';\n  assert(['required', 'optional', 'forbidden'].includes(cidr), 'options.cidr must be one of required, optional, forbidden');\n  // Versions\n  assert(options.version === undefined || typeof options.version === 'string' || Array.isArray(options.version), 'options.version must be a string or an array of string');\n  let versions = options.version || ['ipv4', 'ipv6', 'ipvfuture'];\n  if (!Array.isArray(versions)) {\n    versions = [versions];\n  }\n  assert(versions.length >= 1, 'options.version must have at least 1 version specified');\n  for (const version of versions) {\n    assert(typeof version === 'string' && version === version.toLowerCase(), 'Invalid options.version value');\n    assert(['ipv4', 'ipv6', 'ipvfuture'].includes(version), 'options.version contains unknown version ' + version + ' - must be one of ipv4, ipv6, ipvfuture');\n  }\n  versions = Array.from(new Set(versions));\n  // Regex\n  const parts = versions.map(version => {\n    // Forbidden\n    if (cidr === 'forbidden') {\n      return ipVersions[version];\n    }\n    // Required\n    const cidrpart = `\\\\/${version === 'ipv4' ? ipVersions.v4Cidr : ipVersions.v6Cidr}`;\n    if (cidr === 'required') {\n      return `${ipVersions[version]}${cidrpart}`;\n    }\n    // Optional\n    return `${ipVersions[version]}(?:${cidrpart})?`;\n  });\n  const raw = `(?:${parts.join('|')})`;\n  const regex = new RegExp(`^${raw}$`);\n  return {\n    cidr,\n    versions,\n    regex,\n    raw\n  };\n}","map":{"version":3,"names":["assert","ipVersions","ipRegex","options","cidr","includes","version","undefined","Array","isArray","versions","length","toLowerCase","from","Set","parts","map","cidrpart","v4Cidr","v6Cidr","raw","join","regex","RegExp"],"sources":["../src/ip.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,MAAM,QAAQ,YAAY;AAEnC,SAASC,UAAU,QAAQ,OAAO;AAmClC;;;;;;;AAOA,OAAM,SAAUC,OAAOA,CAACC,OAAA,GAAmB,EAAE;EACzC;EAEA,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAAI,IAAI,UAAU;EACvCJ,MAAM,CACF,CAAC,UAAU,EAAE,UAAU,EAAE,WAAW,CAAC,CAACK,QAAQ,CAACD,IAAI,CAAC,EACpD,2DAA2D,CAC9D;EAED;EAEAJ,MAAM,CACFG,OAAO,CAACG,OAAO,KAAKC,SAAS,IAAI,OAAOJ,OAAO,CAACG,OAAO,KAAK,QAAQ,IAAIE,KAAK,CAACC,OAAO,CAACN,OAAO,CAACG,OAAO,CAAC,EACtG,wDAAwD,CAC3D;EAED,IAAII,QAAQ,GAAGP,OAAO,CAACG,OAAO,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC;EAC/D,IAAI,CAACE,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,EAAE;IAC1BA,QAAQ,GAAG,CAACA,QAAQ,CAAC;;EAGzBV,MAAM,CAACU,QAAQ,CAACC,MAAM,IAAI,CAAC,EAAE,wDAAwD,CAAC;EAEtF,KAAK,MAAML,OAAO,IAAII,QAAQ,EAAE;IAC5BV,MAAM,CAAC,OAAOM,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAKA,OAAO,CAACM,WAAW,EAAE,EAAE,+BAA+B,CAAC;IAEzGZ,MAAM,CACF,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAACK,QAAQ,CAACC,OAAO,CAAC,EAC/C,2CAA2C,GAAGA,OAAO,GAAG,yCAAyC,CACpG;;EAGLI,QAAQ,GAAGF,KAAK,CAACK,IAAI,CAAC,IAAIC,GAAG,CAACJ,QAAQ,CAAC,CAAC;EAExC;EAEA,MAAMK,KAAK,GAAGL,QAAQ,CAACM,GAAG,CAAEV,OAAO,IAAI;IACnC;IAEA,IAAIF,IAAI,KAAK,WAAW,EAAE;MACtB,OAAOH,UAAU,CAACK,OAAO,CAAC;;IAG9B;IAEA,MAAMW,QAAQ,GAAG,MAAMX,OAAO,KAAK,MAAM,GAAGL,UAAU,CAACiB,MAAM,GAAGjB,UAAU,CAACkB,MAAM,EAAE;IAEnF,IAAIf,IAAI,KAAK,UAAU,EAAE;MACrB,OAAO,GAAGH,UAAU,CAACK,OAAO,CAAC,GAAGW,QAAQ,EAAE;;IAG9C;IAEA,OAAO,GAAGhB,UAAU,CAACK,OAAO,CAAC,MAAMW,QAAQ,IAAI;EACnD,CAAC,CAAC;EAEF,MAAMG,GAAG,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAG,CAAC,GAAG;EACpC,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAC,IAAIH,GAAG,GAAG,CAAC;EACpC,OAAO;IAAEhB,IAAI;IAAEM,QAAQ;IAAEY,KAAK;IAAEF;EAAG,CAAE;AACzC"},"metadata":{},"sourceType":"module"}
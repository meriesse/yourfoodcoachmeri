{"ast":null,"code":"const HEX = {\n  '0': 0,\n  '1': 1,\n  '2': 2,\n  '3': 3,\n  '4': 4,\n  '5': 5,\n  '6': 6,\n  '7': 7,\n  '8': 8,\n  '9': 9,\n  a: 10,\n  A: 10,\n  b: 11,\n  B: 11,\n  c: 12,\n  C: 12,\n  d: 13,\n  D: 13,\n  e: 14,\n  E: 14,\n  f: 15,\n  F: 15\n};\nconst UTF8 = {\n  accept: 12,\n  reject: 0,\n  data: [\n  // Maps bytes to character to a transition\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 10, 9, 9, 9, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n  // Maps a state to a new state when adding a transition\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 24, 36, 48, 60, 72, 84, 96, 0, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  // Maps the current transition to a mask that needs to apply to the byte\n  0x7f, 0x3f, 0x3f, 0x3f, 0x00, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07]\n};\n/**\n * Faster version of decodeURIComponent() that does not throw.\n *\n * @param string - the URL string to decode.\n *\n * @returns the decoded string or null if invalid.\n */\nexport function uriDecode(string) {\n  let percentPos = string.indexOf('%');\n  if (percentPos === -1) {\n    return string;\n  }\n  let decoded = '';\n  let last = 0;\n  let codepoint = 0;\n  let startOfOctets = percentPos;\n  let state = UTF8.accept;\n  while (percentPos > -1 && percentPos < string.length) {\n    const high = resolveHex(string[percentPos + 1], 4);\n    const low = resolveHex(string[percentPos + 2], 0);\n    const byte = high | low;\n    const type = UTF8.data[byte];\n    state = UTF8.data[256 + state + type];\n    codepoint = codepoint << 6 | byte & UTF8.data[364 + type];\n    if (state === UTF8.accept) {\n      decoded += string.slice(last, startOfOctets);\n      decoded += codepoint <= 0xffff ? String.fromCharCode(codepoint) : String.fromCharCode(0xd7c0 + (codepoint >> 10), 0xdc00 + (codepoint & 0x3ff));\n      codepoint = 0;\n      last = percentPos + 3;\n      percentPos = string.indexOf('%', last);\n      startOfOctets = percentPos;\n      continue;\n    }\n    if (state === UTF8.reject) {\n      return null;\n    }\n    percentPos += 3;\n    if (percentPos >= string.length || string[percentPos] !== '%') {\n      return null;\n    }\n  }\n  return decoded + string.slice(last);\n}\nfunction resolveHex(char, shift) {\n  const i = HEX[char];\n  return i === undefined ? 255 : i << shift;\n}\n// Adapted from:\n// Copyright (c) 2017-2019 Justin Ridgewell, MIT Licensed, https://github.com/jridgewell/safe-decode-string-component\n// Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>, MIT Licensed, http://bjoern.hoehrmann.de/utf-8/decoder/dfa/","map":{"version":3,"names":["HEX","a","A","b","B","c","C","d","D","e","E","f","F","UTF8","accept","reject","data","uriDecode","string","percentPos","indexOf","decoded","last","codepoint","startOfOctets","state","length","high","resolveHex","low","byte","type","slice","String","fromCharCode","char","shift","i","undefined"],"sources":["../src/decode.ts"],"sourcesContent":[null],"mappings":"AAAA,MAAMA,GAAG,GAA2B;EAChC,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACNC,CAAC,EAAE,EAAE;EACLC,CAAC,EAAE,EAAE;EACLC,CAAC,EAAE,EAAE;EACLC,CAAC,EAAE,EAAE;EACLC,CAAC,EAAE,EAAE;EACLC,CAAC,EAAE,EAAE;EACLC,CAAC,EAAE,EAAE;EACLC,CAAC,EAAE,EAAE;EACLC,CAAC,EAAE,EAAE;EACLC,CAAC,EAAE,EAAE;EACLC,CAAC,EAAE,EAAE;EACLC,CAAC,EAAE;CACN;AAED,MAAMC,IAAI,GAAG;EACTC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,CAAC;EACTC,IAAI,EAAE;EACF;EAEA,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAC7G,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAC7G,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAC7G,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAC7G,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAC7G,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAC7G,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;EAEtG;EAEA,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAC/G,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAA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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @marketto/diacritic-remover 1.0.8\n * Copyright (c) 2019, Marco Ricupero <marco.ricupero@gmail.com>\n * License: MIT\n * ===========================================\n * Latin diacritic json file use material from Wikitionary article \"Latin script\"\n * Source: https://en.wiktionary.org/wiki/Appendix:Latin_script\n * License: CC-BY-SA 3.0\n * ===========================================\n * These diacritic i18n json files use material from Wikipedia article \"Diacritic\"\n * Source: https://en.wikipedia.org/wiki/Diacritic\n * License: CC-BY-SA 3.0\n */\n'use strict';\n\nclass DiacriticAbstractHandler {\n  constructor() {\n    this.USE_VALIDATOR = false;\n    this.FALLBACK_MARKER_MATCHER = \"̸̵̶̡̢̨̛͓̳̜̪̟̠̻̖̹̣̤̙͚̱͇̬͕̰͍̮͎̝͈̫͐̂̍̅̔͋͂͗̃̈̏̎̄̿͌̑̓̈́̇̆̕͘͜͝ͅ\";\n    this.LOWERCASE_MARKER_MATCHER = \"\\\\p{M}\";\n    this.UPPERCASE_MARKER_MATCHER = \"\\\\P{M}\";\n    this.IS_MARKER_REPLACING_AVAILABLE = false;\n    try {\n      this.IS_MARKER_REPLACING_AVAILABLE = !!new RegExp(`(${this.LOWERCASE_MARKER_MATCHER})`, \"gui\");\n    } catch (err) {\n      return;\n    }\n  }\n  get(target, prop, receiver) {\n    if (prop.length <= 1) {\n      return this.USE_VALIDATOR ? this.diacriticValidatorTrap(target, prop) : this.diacriticTrap(target, prop);\n    }\n    return Reflect.get(target, prop, receiver);\n  }\n  diacriticTrap(target, char) {\n    return char.replace(this.diacriticValidatorTrap(target, char), \"\");\n  }\n  diacriticValidatorTrap(target, char) {\n    return this.INSENSITIVE_MARKER_REGEXP;\n  }\n  get INSENSITIVE_MARKER_REGEXP() {\n    return new RegExp(this.IS_MARKER_REPLACING_AVAILABLE ? `(${this.LOWERCASE_MARKER_MATCHER})` : `([${this.FALLBACK_MARKER_MATCHER}]*)`, \"gui\");\n  }\n  get INSENSITIVE_MARKER_MATCHER() {\n    return this.IS_MARKER_REPLACING_AVAILABLE ? `[${this.LOWERCASE_MARKER_MATCHER}${this.UPPERCASE_MARKER_MATCHER}]*` : `[${this.FALLBACK_MARKER_MATCHER}${this.FALLBACK_MARKER_MATCHER.toUpperCase()}]*`;\n  }\n}\nclass DiacriticInsensitiveMatcherHandler extends DiacriticAbstractHandler {\n  diacriticTrap(target, char) {\n    const lowerCaseChar = super.diacriticTrap(target, char).toLowerCase();\n    const lowerCaseDiacritics = target.dictionary[lowerCaseChar] || \"\";\n    const insensitiveMatcher = new Set([lowerCaseChar, lowerCaseChar.toUpperCase(), ...lowerCaseDiacritics, ...lowerCaseDiacritics.toUpperCase()]);\n    return [...insensitiveMatcher].sort().join(\"\");\n  }\n}\nclass DiacriticValidatorHandler extends DiacriticAbstractHandler {\n  constructor() {\n    super(...arguments);\n    this.USE_VALIDATOR = true;\n  }\n  diacriticValidatorTrap(target, char) {\n    const cleanChar = char.replace(super.diacriticValidatorTrap(target, char), \"\");\n    const diacritics = target.dictionary[char.toLowerCase()] || \"\";\n    let charMatcher = \"\";\n    let markerMatcher = \"\";\n    if (cleanChar || diacritics) {\n      charMatcher = `[${cleanChar}${diacritics}]`;\n      markerMatcher = this.INSENSITIVE_MARKER_MATCHER;\n      if (target.isUpperCase(cleanChar)) {\n        charMatcher = charMatcher.toUpperCase();\n      }\n    }\n    return new RegExp(`^${charMatcher}${markerMatcher}$`, \"u\");\n  }\n}\nclass DiacriticInsensitiveValidatorHandler extends DiacriticValidatorHandler {\n  diacriticValidatorTrap(target, char) {\n    const {\n      source\n    } = super.diacriticValidatorTrap(target, char);\n    return new RegExp(source, \"ui\");\n  }\n}\nclass DiacriticMatcherHandler extends DiacriticAbstractHandler {\n  diacriticTrap(target, char) {\n    let matcher = super.diacriticTrap(target, char);\n    const diacritics = target.dictionary[char.toLowerCase()];\n    if (diacritics) {\n      matcher += target.isUpperCase(matcher) ? diacritics.toUpperCase() : diacritics;\n    }\n    return matcher;\n  }\n}\nclass DiacriticMapperCore {\n  constructor(dictionary = {}) {\n    this.dictionary = dictionary;\n    this.matcher = new Proxy(this, new DiacriticMatcherHandler());\n    this.insensitiveMatcher = new Proxy(this, new DiacriticInsensitiveMatcherHandler());\n    this.validator = new Proxy(this, new DiacriticValidatorHandler());\n    this.insensitiveValidator = new Proxy(this, new DiacriticInsensitiveValidatorHandler());\n  }\n  matcherBy(regexp) {\n    const lowerCase = Object.entries(this.dictionary).filter(([key, value]) => value && regexp.test(key)).map(([char, value]) => char + value);\n    const upperCase = Object.entries(this.dictionary).filter(([key, value]) => value && regexp.test(key.toUpperCase())).map(([char, value]) => (char + value).toUpperCase());\n    return [...lowerCase, ...upperCase].join(\"\");\n  }\n  replace(text) {\n    return text.replace(/./g, char => this[char]);\n  }\n  /**\n   * Check if the given string is uppercase\n   *\n   * @param {string} [text=''] string to check\n   * @returns {boolean} true if text is uppercase\n   * @memberof DiacriticMapperCore\n   */\n  isUpperCase(text = \"\") {\n    return text.toLowerCase() !== text;\n  }\n  /**\n   * Check if the given string is lowercase\n   *\n   * @param {string} [text=''] string to check\n   * @returns {boolean} true if text is lowercase\n   * @memberof DiacriticMapperCore\n   */\n  isLowerCase(text = \"\") {\n    return text.toUpperCase() !== text;\n  }\n}\n\n// Copyright Joyent, Inc. and other Node contributors.\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nclass DiacriticRemoverHandler extends DiacriticAbstractHandler {\n  diacriticTrap(target, char) {\n    const cleanChar = super.diacriticTrap(target, char);\n    if (!cleanChar.trim() || cleanChar.length !== 1) {\n      return cleanChar;\n    }\n    const lowerCaseChar = cleanChar.toLowerCase();\n    const [plainChar] = Object.entries(target.dictionary).find(([letter, diacritics]) => isString(diacritics) && [letter, ...diacritics].includes(lowerCaseChar)) || [cleanChar];\n    return target.isUpperCase(cleanChar) ? plainChar.toUpperCase() : plainChar;\n  }\n}\nvar i18nGlobal = {\n  \"\": \"ʰ'ʼ·׳\"\n};\nvar LATIN_DICT = {\n  a: \"àáâãäåāăąǎǟǡǻȁȃȧɐɑɒᴀᶏḁạảấầẩẫậắằẳẵặⱥａ\",\n  ae: \"æǣǽᴁᴂᴭᵆ\",\n  b: \"ƀƃɓʙᵬᶀḃḅḇｂ\",\n  c: \"cçćĉċčƈȼɕ̄ᴄḉｃ\",\n  d: \"dðþďđƌȡɖɗ̦ᴅᵭᶁᶑḋḍḏḑḓｄ\",\n  db: \"ȸ\",\n  dz: \"ǆǳ\",\n  e: \"èéêëēĕėęěǝȅȇȩɇəɛᴇᶒḕḗḙḛḝẹẻẽếềểễệⱸｅ\",\n  eo: \"ᴔ\",\n  f: \"fƒᵮᶂḟꜰﬀｆ\",\n  g: \"ĝğġģǥǧǵȝɠɢᶃḡｇ\",\n  h: \"hĥħȟɦʜʰ̱ḣḥḧḩḫẖⱨｈ\",\n  i: \"iìíîïĩīĭįıǐȉȋɨɩɪ̇ᵻᶖḭḯỉịｉ\",\n  ij: \"ĳ\",\n  j: \"jĵǰȷɉɟʄʝ̌ᴊｊ\",\n  k: \"ķƙǩᴋᶄḱḳḵⱪꝁｋ\",\n  l: \"lĺļľŀłƚȴɫɬɭʟᶅḷḹḻḽⱡｌ\",\n  lj: \"ǉ\",\n  m: \"ɱᴍᵯᶆḿṁṃｍ\",\n  n: \"nñńņňƞǹȵɲɳɴᵰᶇṅṇṉṋｎ\",\n  nj: \"ŋǌ̈\",\n  o: \"òóôõöøōŏőơǒǫǭǿȍȏȫȭȯȱɔɵᴏṍṏṑṓọỏốồổỗộớờởỡợⱺｏ\",\n  oe: \"œ\",\n  p: \"pƥƿ̃ᴘᵱᵽᶈṕṗｐ\",\n  q: \"ƣɋʠｑ\",\n  qp: \"ȹ\",\n  r: \"ŕŗřȑȓɍɼɽɾʀᵲᵳᶉṙṛṝṟꝛｒ\",\n  s: \"sśŝşšſșȿʂʃ̩ᵴᶊṡṣṥṧṩẛꜱｓ\",\n  ss: \"ß\",\n  t: \"tţťŧƫƭțȶʈᴛᵵṫṭṯṱẗⱦｔ\",\n  u: \"ùúûüũūŭůűųưǔǖǘǚǜȕȗʉʊᴜᵾṳṵṷṹṻụủứừửữựｕ\",\n  ue: \"ᵫ\",\n  uo: \"ȣ\",\n  ut: \"ᶙ\",\n  v: \"ʋʌᴠᶌṽṿⱱⱴｖ\",\n  w: \"ŵᴡẁẃẅẇẉẘⱳｗ\",\n  x: \"ᶍẋẍｘ\",\n  y: \"ýÿŷƴȳɏʏẏẙỳỵỷỹｙ\",\n  z: \"zźżžƶƹȥɀʐʑʒᴢᵶᶎẑẓẕⱬｚ\"\n};\nclass DiacriticRemover extends DiacriticMapperCore {\n  constructor(...dictionaries) {\n    super();\n    const mergedDictionaries = Object.freeze((dictionaries.length ? dictionaries : [LATIN_DICT, i18nGlobal]).reduce((dictMerge, currentDict) => [...dictMerge, ...Object.entries(currentDict)], []).reduce((accumulator, [letter, diacritics]) => {\n      let targetSet = accumulator.find(([targetLetter]) => targetLetter === letter);\n      if (!targetSet) {\n        targetSet = [letter, []];\n        accumulator.push(targetSet);\n      }\n      targetSet[1] = [...targetSet[1], ...diacritics];\n      return accumulator;\n    }, []).reduce((accumulator, [letter, diacritics]) => Object.assign(Object.assign({}, accumulator), {\n      [letter]: [...new Set(diacritics)].sort().join(\"\")\n    }), {}));\n    Object.defineProperty(this, \"dictionary\", {\n      configurable: false,\n      enumerable: false,\n      value: mergedDictionaries\n    });\n    return new Proxy(this, new DiacriticRemoverHandler());\n  }\n}\nmodule.exports = DiacriticRemover;","map":{"version":3,"names":["DiacriticAbstractHandler","constructor","USE_VALIDATOR","FALLBACK_MARKER_MATCHER","LOWERCASE_MARKER_MATCHER","UPPERCASE_MARKER_MATCHER","IS_MARKER_REPLACING_AVAILABLE","RegExp","err","get","target","prop","receiver","length","diacriticValidatorTrap","diacriticTrap","Reflect","char","replace","INSENSITIVE_MARKER_REGEXP","INSENSITIVE_MARKER_MATCHER","toUpperCase","DiacriticInsensitiveMatcherHandler","lowerCaseChar","toLowerCase","lowerCaseDiacritics","dictionary","insensitiveMatcher","Set","sort","join","DiacriticValidatorHandler","arguments","cleanChar","diacritics","charMatcher","markerMatcher","isUpperCase","DiacriticInsensitiveValidatorHandler","source","DiacriticMatcherHandler","matcher","DiacriticMapperCore","Proxy","validator","insensitiveValidator","matcherBy","regexp","lowerCase","Object","entries","filter","key","value","test","map","upperCase","text","isLowerCase","isString","arg","DiacriticRemoverHandler","trim","plainChar","find","letter","includes","i18nGlobal","LATIN_DICT","a","ae","b","c","d","db","dz","e","eo","f","g","h","i","ij","j","k","l","lj","m","n","nj","o","oe","p","q","qp","r","s","ss","t","u","ue","uo","ut","v","w","x","y","z","DiacriticRemover","dictionaries","mergedDictionaries","freeze","reduce","dictMerge","currentDict","accumulator","targetSet","targetLetter","push","assign","defineProperty","configurable","enumerable","module","exports"],"sources":["/Users/angelamariaselvaggi/node_modules/@marketto/diacritic-remover/dist/diacritic-remover.js"],"sourcesContent":["/**\n * @marketto/diacritic-remover 1.0.8\n * Copyright (c) 2019, Marco Ricupero <marco.ricupero@gmail.com>\n * License: MIT\n * ===========================================\n * Latin diacritic json file use material from Wikitionary article \"Latin script\"\n * Source: https://en.wiktionary.org/wiki/Appendix:Latin_script\n * License: CC-BY-SA 3.0\n * ===========================================\n * These diacritic i18n json files use material from Wikipedia article \"Diacritic\"\n * Source: https://en.wikipedia.org/wiki/Diacritic\n * License: CC-BY-SA 3.0\n */\n'use strict';\n\nclass DiacriticAbstractHandler {\n    constructor() {\n        this.USE_VALIDATOR = false;\n        this.FALLBACK_MARKER_MATCHER = \"̸̵̶̡̢̨̛͓̳̜̪̟̠̻̖̹̣̤̙͚̱͇̬͕̰͍̮͎̝͈̫͐̂̍̅̔͋͂͗̃̈̏̎̄̿͌̑̓̈́̇̆̕͘͜͝ͅ\";\n        this.LOWERCASE_MARKER_MATCHER = \"\\\\p{M}\";\n        this.UPPERCASE_MARKER_MATCHER = \"\\\\P{M}\";\n        this.IS_MARKER_REPLACING_AVAILABLE = false;\n        try {\n            this.IS_MARKER_REPLACING_AVAILABLE = !!(new RegExp(`(${this.LOWERCASE_MARKER_MATCHER})`, \"gui\"));\n        }\n        catch (err) {\n            return;\n        }\n    }\n    get(target, prop, receiver) {\n        if (prop.length <= 1) {\n            return this.USE_VALIDATOR ? this.diacriticValidatorTrap(target, prop) : this.diacriticTrap(target, prop);\n        }\n        return Reflect.get(target, prop, receiver);\n    }\n    diacriticTrap(target, char) {\n        return char.replace(this.diacriticValidatorTrap(target, char), \"\");\n    }\n    diacriticValidatorTrap(target, char) {\n        return this.INSENSITIVE_MARKER_REGEXP;\n    }\n    get INSENSITIVE_MARKER_REGEXP() {\n        return new RegExp(this.IS_MARKER_REPLACING_AVAILABLE ?\n            `(${this.LOWERCASE_MARKER_MATCHER})` :\n            `([${this.FALLBACK_MARKER_MATCHER}]*)`, \"gui\");\n    }\n    get INSENSITIVE_MARKER_MATCHER() {\n        return this.IS_MARKER_REPLACING_AVAILABLE ?\n            `[${this.LOWERCASE_MARKER_MATCHER}${this.UPPERCASE_MARKER_MATCHER}]*` :\n            `[${this.FALLBACK_MARKER_MATCHER}${this.FALLBACK_MARKER_MATCHER.toUpperCase()}]*`;\n    }\n}\n\nclass DiacriticInsensitiveMatcherHandler extends DiacriticAbstractHandler {\n    diacriticTrap(target, char) {\n        const lowerCaseChar = super.diacriticTrap(target, char).toLowerCase();\n        const lowerCaseDiacritics = target.dictionary[lowerCaseChar] || \"\";\n        const insensitiveMatcher = new Set([\n            lowerCaseChar,\n            lowerCaseChar.toUpperCase(),\n            ...lowerCaseDiacritics,\n            ...lowerCaseDiacritics.toUpperCase(),\n        ]);\n        return [...insensitiveMatcher].sort().join(\"\");\n    }\n}\n\nclass DiacriticValidatorHandler extends DiacriticAbstractHandler {\n    constructor() {\n        super(...arguments);\n        this.USE_VALIDATOR = true;\n    }\n    diacriticValidatorTrap(target, char) {\n        const cleanChar = char.replace(super.diacriticValidatorTrap(target, char), \"\");\n        const diacritics = target.dictionary[char.toLowerCase()] || \"\";\n        let charMatcher = \"\";\n        let markerMatcher = \"\";\n        if (cleanChar || diacritics) {\n            charMatcher = `[${cleanChar}${diacritics}]`;\n            markerMatcher = this.INSENSITIVE_MARKER_MATCHER;\n            if (target.isUpperCase(cleanChar)) {\n                charMatcher = charMatcher.toUpperCase();\n            }\n        }\n        return new RegExp(`^${charMatcher}${markerMatcher}$`, \"u\");\n    }\n}\n\nclass DiacriticInsensitiveValidatorHandler extends DiacriticValidatorHandler {\n    diacriticValidatorTrap(target, char) {\n        const { source } = super.diacriticValidatorTrap(target, char);\n        return new RegExp(source, \"ui\");\n    }\n}\n\nclass DiacriticMatcherHandler extends DiacriticAbstractHandler {\n    diacriticTrap(target, char) {\n        let matcher = super.diacriticTrap(target, char);\n        const diacritics = target.dictionary[char.toLowerCase()];\n        if (diacritics) {\n            matcher += target.isUpperCase(matcher) ? diacritics.toUpperCase() : diacritics;\n        }\n        return matcher;\n    }\n}\n\nclass DiacriticMapperCore {\n    constructor(dictionary = {}) {\n        this.dictionary = dictionary;\n        this.matcher = new Proxy(this, new DiacriticMatcherHandler());\n        this.insensitiveMatcher = new Proxy(this, new DiacriticInsensitiveMatcherHandler());\n        this.validator = new Proxy(this, new DiacriticValidatorHandler());\n        this.insensitiveValidator = new Proxy(this, new DiacriticInsensitiveValidatorHandler());\n    }\n    matcherBy(regexp) {\n        const lowerCase = Object.entries(this.dictionary)\n            .filter(([key, value]) => value && regexp.test(key))\n            .map(([char, value]) => char + value);\n        const upperCase = Object.entries(this.dictionary)\n            .filter(([key, value]) => value && regexp.test(key.toUpperCase()))\n            .map(([char, value]) => (char + value).toUpperCase());\n        return [...lowerCase, ...upperCase].join(\"\");\n    }\n    replace(text) {\n        return text.replace(/./g, (char) => this[char]);\n    }\n    /**\n     * Check if the given string is uppercase\n     *\n     * @param {string} [text=''] string to check\n     * @returns {boolean} true if text is uppercase\n     * @memberof DiacriticMapperCore\n     */\n    isUpperCase(text = \"\") {\n        return text.toLowerCase() !== text;\n    }\n    /**\n     * Check if the given string is lowercase\n     *\n     * @param {string} [text=''] string to check\n     * @returns {boolean} true if text is lowercase\n     * @memberof DiacriticMapperCore\n     */\n    isLowerCase(text = \"\") {\n        return text.toUpperCase() !== text;\n    }\n}\n\n// Copyright Joyent, Inc. and other Node contributors.\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nclass DiacriticRemoverHandler extends DiacriticAbstractHandler {\n    diacriticTrap(target, char) {\n        const cleanChar = super.diacriticTrap(target, char);\n        if (!cleanChar.trim() || cleanChar.length !== 1) {\n            return cleanChar;\n        }\n        const lowerCaseChar = cleanChar.toLowerCase();\n        const [plainChar] = Object.entries(target.dictionary)\n            .find(([letter, diacritics]) => isString(diacritics) &&\n            [letter, ...diacritics].includes(lowerCaseChar)) || [cleanChar];\n        return target.isUpperCase(cleanChar) ?\n            plainChar.toUpperCase() :\n            plainChar;\n    }\n}\n\nvar i18nGlobal = {\n\t\"\": \"ʰ'ʼ·׳\"\n};\n\nvar LATIN_DICT = {\n\ta: \"àáâãäåāăąǎǟǡǻȁȃȧɐɑɒᴀᶏḁạảấầẩẫậắằẳẵặⱥａ\",\n\tae: \"æǣǽᴁᴂᴭᵆ\",\n\tb: \"ƀƃɓʙᵬᶀḃḅḇｂ\",\n\tc: \"cçćĉċčƈȼɕ̄ᴄḉｃ\",\n\td: \"dðþďđƌȡɖɗ̦ᴅᵭᶁᶑḋḍḏḑḓｄ\",\n\tdb: \"ȸ\",\n\tdz: \"ǆǳ\",\n\te: \"èéêëēĕėęěǝȅȇȩɇəɛᴇᶒḕḗḙḛḝẹẻẽếềểễệⱸｅ\",\n\teo: \"ᴔ\",\n\tf: \"fƒᵮᶂḟꜰﬀｆ\",\n\tg: \"ĝğġģǥǧǵȝɠɢᶃḡｇ\",\n\th: \"hĥħȟɦʜʰ̱ḣḥḧḩḫẖⱨｈ\",\n\ti: \"iìíîïĩīĭįıǐȉȋɨɩɪ̇ᵻᶖḭḯỉịｉ\",\n\tij: \"ĳ\",\n\tj: \"jĵǰȷɉɟʄʝ̌ᴊｊ\",\n\tk: \"ķƙǩᴋᶄḱḳḵⱪꝁｋ\",\n\tl: \"lĺļľŀłƚȴɫɬɭʟᶅḷḹḻḽⱡｌ\",\n\tlj: \"ǉ\",\n\tm: \"ɱᴍᵯᶆḿṁṃｍ\",\n\tn: \"nñńņňƞǹȵɲɳɴᵰᶇṅṇṉṋｎ\",\n\tnj: \"ŋǌ̈\",\n\to: \"òóôõöøōŏőơǒǫǭǿȍȏȫȭȯȱɔɵᴏṍṏṑṓọỏốồổỗộớờởỡợⱺｏ\",\n\toe: \"œ\",\n\tp: \"pƥƿ̃ᴘᵱᵽᶈṕṗｐ\",\n\tq: \"ƣɋʠｑ\",\n\tqp: \"ȹ\",\n\tr: \"ŕŗřȑȓɍɼɽɾʀᵲᵳᶉṙṛṝṟꝛｒ\",\n\ts: \"sśŝşšſșȿʂʃ̩ᵴᶊṡṣṥṧṩẛꜱｓ\",\n\tss: \"ß\",\n\tt: \"tţťŧƫƭțȶʈᴛᵵṫṭṯṱẗⱦｔ\",\n\tu: \"ùúûüũūŭůűųưǔǖǘǚǜȕȗʉʊᴜᵾṳṵṷṹṻụủứừửữựｕ\",\n\tue: \"ᵫ\",\n\tuo: \"ȣ\",\n\tut: \"ᶙ\",\n\tv: \"ʋʌᴠᶌṽṿⱱⱴｖ\",\n\tw: \"ŵᴡẁẃẅẇẉẘⱳｗ\",\n\tx: \"ᶍẋẍｘ\",\n\ty: \"ýÿŷƴȳɏʏẏẙỳỵỷỹｙ\",\n\tz: \"zźżžƶƹȥɀʐʑʒᴢᵶᶎẑẓẕⱬｚ\"\n};\n\nclass DiacriticRemover extends DiacriticMapperCore {\n    constructor(...dictionaries) {\n        super();\n        const mergedDictionaries = Object.freeze((dictionaries.length ? dictionaries : [LATIN_DICT, i18nGlobal])\n            .reduce((dictMerge, currentDict) => [...dictMerge, ...Object.entries(currentDict)], [])\n            .reduce((accumulator, [letter, diacritics]) => {\n            let targetSet = accumulator.find(([targetLetter]) => targetLetter === letter);\n            if (!targetSet) {\n                targetSet = [letter, []];\n                accumulator.push(targetSet);\n            }\n            targetSet[1] = [...targetSet[1], ...diacritics];\n            return accumulator;\n        }, [])\n            .reduce((accumulator, [letter, diacritics]) => (Object.assign(Object.assign({}, accumulator), { [letter]: [...(new Set(diacritics))].sort().join(\"\") })), {}));\n        Object.defineProperty(this, \"dictionary\", {\n            configurable: false,\n            enumerable: false,\n            value: mergedDictionaries,\n        });\n        return new Proxy(this, new DiacriticRemoverHandler());\n    }\n}\n\nmodule.exports = DiacriticRemover;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
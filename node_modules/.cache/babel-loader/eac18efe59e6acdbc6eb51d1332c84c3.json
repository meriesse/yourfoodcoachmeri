{"ast":null,"code":"import{collection,doc,addDoc,getDoc,setDoc,updateDoc,getDocs}from\"firebase/firestore\";import{auth,db}from\"../config/firebase-config\";/*\n Funzione che si occupa di memorizzare i dati di un profilo utente su Firestore Database\n */export async function signUpUser(email,password,nome,cognome,sesso,telefono,cf,data_nasc,luogo_nasc,prov_nasc,luogo_resid,prov_resid,via_resid,ruolo){try{const userCredential=await auth.createUserWithEmailAndPassword(email,password);const uid=userCredential.user.uid;const userDocRef=doc(db,'users',uid);const anagraficaDocRef=doc(db,'users',uid,'anagrafica',uid);await setDoc(userDocRef,{email:email,nome:nome,ruolo:ruolo});localStorage.setItem('user',nome);localStorage.setItem('role',ruolo);await setDoc(anagraficaDocRef,{cognome:cognome,nome:nome,sesso:sesso,data_nasc:data_nasc,luogo_nasc:luogo_nasc,prov_nasc:prov_nasc,cf:cf,luogo_resid:luogo_resid,prov_resid:prov_resid,via_resid:via_resid,telefono:telefono,email:email,ruolo:ruolo});return{success:true,message:\"Registrazione completata con successo\"};}catch(error){console.error('Errore durante la registrazione dell\\'utente:',error.message);return{success:false,message:error.message};}}export async function fetchUser(uid){try{const anagraficaDocRef=doc(db,'users',uid,'anagrafica',uid);const docSnap=await getDoc(anagraficaDocRef);if(docSnap.exists()){return docSnap.data();}else{console.log(\"Nessun documento trovato con l'UID inserito nella collezione 'anagrafica'!\");return null;}}catch(error){console.error(\"Errore durante la lettura dei dati:\",error);return null;}}export async function updateUser(uid,nome,cognome,sesso,data_nasc,luogo_nasc,prov_nasc,cf,luogo_resid,prov_resid,via_resid,telefono,email){const anagraficaDocRef=doc(db,'users',uid,'anagrafica',uid);try{const docSnap=await getDoc(anagraficaDocRef);if(docSnap.exists()){await updateDoc(anagraficaDocRef,{cognome:cognome,nome:nome,sesso:sesso,data_nasc:data_nasc,luogo_nasc:luogo_nasc,prov_nasc:prov_nasc,cf:cf,luogo_resid:luogo_resid,prov_resid:prov_resid,via_resid:via_resid,telefono:telefono,email:email});return{success:true,message:\"Aggiornamento completato con successo\"};}else{return{success:false,message:\"Il documento dell'anagrafica non esiste\"};}}catch(error){console.error(\"Errore durante l'aggiornamento dei dati:\",error);return{success:false,message:error.message};}}","map":{"version":3,"names":["collection","doc","addDoc","getDoc","setDoc","updateDoc","getDocs","auth","db","signUpUser","email","password","nome","cognome","sesso","telefono","cf","data_nasc","luogo_nasc","prov_nasc","luogo_resid","prov_resid","via_resid","ruolo","userCredential","createUserWithEmailAndPassword","uid","user","userDocRef","anagraficaDocRef","localStorage","setItem","success","message","error","console","fetchUser","docSnap","exists","data","log","updateUser"],"sources":["/Users/angelamariaselvaggi/Desktop/unimeri/Tesi/Applicazione/APP MERI/src/context/UserContext.js"],"sourcesContent":["import {collection, doc, addDoc, getDoc, setDoc, updateDoc, getDocs} from \"firebase/firestore\";\nimport {auth, db} from \"../config/firebase-config\";\n/*\n Funzione che si occupa di memorizzare i dati di un profilo utente su Firestore Database\n */\n\n export async function signUpUser(email, password, nome, cognome, sesso, telefono, cf, data_nasc, luogo_nasc, prov_nasc, luogo_resid, prov_resid, via_resid, ruolo) {\n    try {\n        const userCredential = await auth.createUserWithEmailAndPassword(email, password);\n        const uid = userCredential.user.uid;\n\n        const userDocRef = doc(db, 'users', uid);\n        const anagraficaDocRef = doc(db, 'users', uid, 'anagrafica', uid);\n\n        await setDoc(userDocRef, {\n            email: email,\n            nome: nome,\n            ruolo: ruolo\n        });\n\n        localStorage.setItem('user', nome);\n        localStorage.setItem('role', ruolo);\n\n        await setDoc(anagraficaDocRef, {\n            cognome: cognome,\n            nome: nome,\n            sesso: sesso,\n            data_nasc: data_nasc,\n            luogo_nasc: luogo_nasc,\n            prov_nasc: prov_nasc,\n            cf: cf,\n            luogo_resid: luogo_resid,\n            prov_resid: prov_resid,\n            via_resid: via_resid,\n            telefono: telefono,\n            email: email,\n            ruolo: ruolo,\n        });\n\n        return { success: true, message: \"Registrazione completata con successo\" };\n    } catch (error) {\n        console.error('Errore durante la registrazione dell\\'utente:', error.message);\n        return { success: false, message: error.message };\n    }\n}\n\nexport async function fetchUser(uid) {\n    try {\n        const anagraficaDocRef = doc(db, 'users', uid, 'anagrafica', uid);\n        const docSnap = await getDoc(anagraficaDocRef);\n\n        if (docSnap.exists()) {\n            return docSnap.data();\n        } else {\n            console.log(\"Nessun documento trovato con l'UID inserito nella collezione 'anagrafica'!\");\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Errore durante la lettura dei dati:\", error);\n        return null;\n    }\n}\n\nexport async function updateUser(uid, nome, cognome, sesso, data_nasc, luogo_nasc, prov_nasc, cf, luogo_resid, prov_resid, via_resid, telefono, email) {\n    const anagraficaDocRef = doc(db, 'users', uid, 'anagrafica', uid);\n\n    try {\n        const docSnap = await getDoc(anagraficaDocRef);\n\n        if (docSnap.exists()) {\n            await updateDoc(anagraficaDocRef, {\n                cognome: cognome,\n                nome: nome,\n                sesso: sesso,\n                data_nasc: data_nasc,\n                luogo_nasc: luogo_nasc,\n                prov_nasc: prov_nasc,\n                cf: cf,\n                luogo_resid: luogo_resid,\n                prov_resid: prov_resid,\n                via_resid: via_resid,\n                telefono: telefono,\n                email: email\n            });\n\n            return { success: true, message: \"Aggiornamento completato con successo\" };\n        } else {\n            return { success: false, message: \"Il documento dell'anagrafica non esiste\" };\n        }\n    } catch (error) {\n        console.error(\"Errore durante l'aggiornamento dei dati:\", error);\n        return { success: false, message: error.message };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
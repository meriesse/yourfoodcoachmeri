{"ast":null,"code":"import { deleteDoc, doc, getDoc, setDoc, updateDoc } from \"firebase/firestore\";\nimport { db, auth } from \"../config/firebase-config\";\n\n//Funzione che si occupa di memorizzare i dati di un paziente su Firestore Database\n\n/*export async function addPatient(formData, paziente) {\n   //formData.data_inserimento = serverTimestamp();\n   //formData.email_paziente = paziente.email_paziente;\n   //formData.numero_telefono_paziente = paziente.numero_telefono_paziente;\n   const userDocRef = doc(db, 'users');\n   //await setDoc(doc(collection(db, \"users\")), formData);\n    await setDoc(userDocRef, {\n       email: formData.email_paziente,\n       nome: formData.nome_paziente,\n       ruolo: \"Utente\"\n   });\n} */\n\nconst crypto = require('crypto');\nexport function generateRandomPassword() {\n  return crypto.randomBytes(8).toString('hex');\n}\nexport async function createPatient(uidCurr, formData) {\n  try {\n    // Genera una password casuale\n    const randomPassword = generateRandomPassword();\n\n    // Crea l'account con la password casuale\n    const patientUserCredential = await auth.createUserWithEmailAndPassword(formData.email, randomPassword);\n\n    // Invia un'email al paziente con il link per la modifica della password\n    await auth.sendPasswordResetEmail(formData.email);\n\n    // Salva il ruolo dell'utente come \"paziente\" nel database Firestore\n    await setDoc(doc(db, 'users', patientUserCredential.user.uid), {\n      email: patientUserCredential.user.email,\n      role: 'Utente',\n      nutrizionistaId: uidCurr\n      // Altri dati del paziente\n    });\n    console.log('Paziente registrato con successo. Email inviata per la modifica della password.');\n  } catch (error) {\n    console.error('Errore durante la registrazione del paziente:', error.message);\n    //throw error;\n  }\n}\n;\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente è giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n  await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n  await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\nexport async function getPatient(email_paziente) {\n  const docRef = doc(db, \"users\", email_paziente);\n  const docSnap = await getDoc(docRef);\n  if (docSnap.exists()) {\n    console.log(\"Documento letto correttamente \");\n    console.log(docSnap.data());\n    return docSnap.data();\n  } else {\n    console.log(\"Nessun documento trovato con il codice fiscale inserito!\");\n  }\n}","map":{"version":3,"names":["deleteDoc","doc","getDoc","setDoc","updateDoc","db","auth","crypto","require","generateRandomPassword","randomBytes","toString","createPatient","uidCurr","formData","randomPassword","patientUserCredential","createUserWithEmailAndPassword","email","sendPasswordResetEmail","user","uid","role","nutrizionistaId","console","log","error","message","updateTelephone","email_paziente","deleteDiet","getPatient","docRef","docSnap","exists","data"],"sources":["/Users/angelamariaselvaggi/Desktop/unimeri/Tesi/Applicazione/APP MERI/src/context/PatientContext.js"],"sourcesContent":["import {deleteDoc, doc, getDoc, setDoc, updateDoc} from \"firebase/firestore\";\nimport {db, auth} from \"../config/firebase-config\";\n\n\n //Funzione che si occupa di memorizzare i dati di un paziente su Firestore Database\n \n /*export async function addPatient(formData, paziente) {\n    //formData.data_inserimento = serverTimestamp();\n    //formData.email_paziente = paziente.email_paziente;\n    //formData.numero_telefono_paziente = paziente.numero_telefono_paziente;\n    const userDocRef = doc(db, 'users');\n    //await setDoc(doc(collection(db, \"users\")), formData);\n\n    await setDoc(userDocRef, {\n        email: formData.email_paziente,\n        nome: formData.nome_paziente,\n        ruolo: \"Utente\"\n    });\n} */\n\nconst crypto = require('crypto');\nexport function generateRandomPassword() {\n    return crypto.randomBytes(8).toString('hex');\n  }\n  \n  export async function createPatient(uidCurr, formData) {\n      try {\n           // Genera una password casuale\n      const randomPassword = generateRandomPassword();\n  \n      // Crea l'account con la password casuale\n      const patientUserCredential = await auth.createUserWithEmailAndPassword(formData.email, randomPassword);\n  \n      // Invia un'email al paziente con il link per la modifica della password\n      await auth.sendPasswordResetEmail(formData.email);\n  \n      // Salva il ruolo dell'utente come \"paziente\" nel database Firestore\n      await setDoc(doc(db, 'users', patientUserCredential.user.uid), {\n        email: patientUserCredential.user.email,\n        role: 'Utente',\n        nutrizionistaId: uidCurr,\n        // Altri dati del paziente\n      });\n  \n      console.log('Paziente registrato con successo. Email inviata per la modifica della password.');\n    } catch (error) {\n      console.error('Errore durante la registrazione del paziente:', error.message);\n      //throw error;\n  } \n      };\n\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente è giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n    await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\n export async function getPatient(email_paziente) {\n    const docRef = doc(db, \"users\", email_paziente);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n        console.log(\"Documento letto correttamente \");\n        console.log(docSnap.data());\n        return docSnap.data();\n    } else {\n        console.log((\"Nessun documento trovato con il codice fiscale inserito!\"));\n    }\n}"],"mappings":"AAAA,SAAQA,SAAS,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,QAAO,oBAAoB;AAC5E,SAAQC,EAAE,EAAEC,IAAI,QAAO,2BAA2B;;AAGjD;;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,OAAO,SAASC,sBAAsBA,CAAA,EAAG;EACrC,OAAOF,MAAM,CAACG,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;AAC9C;AAEA,OAAO,eAAeC,aAAaA,CAACC,OAAO,EAAEC,QAAQ,EAAE;EACnD,IAAI;IACC;IACL,MAAMC,cAAc,GAAGN,sBAAsB,CAAC,CAAC;;IAE/C;IACA,MAAMO,qBAAqB,GAAG,MAAMV,IAAI,CAACW,8BAA8B,CAACH,QAAQ,CAACI,KAAK,EAAEH,cAAc,CAAC;;IAEvG;IACA,MAAMT,IAAI,CAACa,sBAAsB,CAACL,QAAQ,CAACI,KAAK,CAAC;;IAEjD;IACA,MAAMf,MAAM,CAACF,GAAG,CAACI,EAAE,EAAE,OAAO,EAAEW,qBAAqB,CAACI,IAAI,CAACC,GAAG,CAAC,EAAE;MAC7DH,KAAK,EAAEF,qBAAqB,CAACI,IAAI,CAACF,KAAK;MACvCI,IAAI,EAAE,QAAQ;MACdC,eAAe,EAAEV;MACjB;IACF,CAAC,CAAC;IAEFW,OAAO,CAACC,GAAG,CAAC,iFAAiF,CAAC;EAChG,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC7E;EACJ;AACI;AAAC;;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,eAAeC,eAAeA,CAACd,QAAQ,EAAEe,cAAc,EAAE;EAC5D,MAAMzB,SAAS,CAACH,GAAG,CAACI,EAAE,EAAE,OAAO,EAAEwB,cAAc,CAAC,EAAEf,QAAQ,CAAC;AAC/D;;AAEA;AACA;AACA;AACA,OAAO,eAAegB,UAAUA,CAACD,cAAc,EAAE;EAC7C,MAAM7B,SAAS,CAACC,GAAG,CAACI,EAAE,EAAE,OAAO,EAAEwB,cAAc,CAAC,CAAC;AACrD;;AAEA;AACA;AACA;AACC,OAAO,eAAeE,UAAUA,CAACF,cAAc,EAAE;EAC9C,MAAMG,MAAM,GAAG/B,GAAG,CAACI,EAAE,EAAE,OAAO,EAAEwB,cAAc,CAAC;EAC/C,MAAMI,OAAO,GAAG,MAAM/B,MAAM,CAAC8B,MAAM,CAAC;EACpC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;IAClBV,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC7CD,OAAO,CAACC,GAAG,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;IAC3B,OAAOF,OAAO,CAACE,IAAI,CAAC,CAAC;EACzB,CAAC,MAAM;IACHX,OAAO,CAACC,GAAG,CAAE,0DAA2D,CAAC;EAC7E;AACJ"},"metadata":{},"sourceType":"module"}
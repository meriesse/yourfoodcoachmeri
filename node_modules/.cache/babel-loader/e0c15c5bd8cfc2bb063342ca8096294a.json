{"ast":null,"code":"import { doc, getDoc, setDoc, updateDoc, getDocs, where } from \"firebase/firestore\";\nimport { auth, db } from \"../config/firebase-config\";\n\n/*\n Funzione che si occupa di memorizzare i dati di un profilo utente su Firestore Database\n */\n\nexport async function signUpUser(email, password, nome, cognome, sesso, telefono, cf, data_nasc, luogo_nasc, prov_nasc, luogo_resid, prov_resid, via_resid, ruolo) {\n  try {\n    const userCredential = await auth.createUserWithEmailAndPassword(email, password);\n    const uid = userCredential.user.uid;\n    const userDocRef = doc(db, 'users', uid);\n    const anagraficaDocRef = doc(db, 'users', uid, 'anagrafica', uid);\n    await setDoc(userDocRef, {\n      email: email,\n      nome: nome,\n      ruolo: ruolo\n    });\n    localStorage.setItem('user', nome);\n    localStorage.setItem('role', ruolo);\n    await setDoc(anagraficaDocRef, {\n      cognome: cognome,\n      nome: nome,\n      sesso: sesso,\n      data_nasc: data_nasc,\n      luogo_nasc: luogo_nasc,\n      prov_nasc: prov_nasc,\n      cf: cf,\n      luogo_resid: luogo_resid,\n      prov_resid: prov_resid,\n      via_resid: via_resid,\n      telefono: telefono,\n      email: email,\n      ruolo: ruolo\n    });\n    return {\n      success: true,\n      message: \"Registrazione completata con successo\"\n    };\n  } catch (error) {\n    console.error('Errore durante la registrazione dell\\'utente:', error.message);\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n}\n\n/*export async function fetchUser(uid) {\n    try {\n        const anagraficaDocRef = doc(db, 'users', uid, 'anagrafica', uid);\n        const docSnap = await getDoc(anagraficaDocRef);\n\n        if (docSnap.exists()) {\n            return docSnap.data();\n        } else {\n            console.log(\"Nessun documento trovato con l'UID inserito nella collezione 'anagrafica'!\");\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Errore durante la lettura dei dati:\", error);\n        return null;\n    }\n}*/\nexport const fetchUser = async uid => {\n  const userRef = doc(db, \"users\");\n  const q = query(userRef, where(\"uid\", \"==\", uid));\n  const querySnapshot = await getDocs(q);\n  if (querySnapshot.empty) {\n    throw new Error(\"Utente non trovato\");\n  }\n  const user = querySnapshot.docs[0].data();\n  return {\n    ...user,\n    uid: querySnapshot.docs[0].id\n  };\n};\nexport async function updateUser(uid, nome, cognome, sesso, data_nasc, luogo_nasc, prov_nasc, cf, luogo_resid, prov_resid, via_resid, telefono, email) {\n  const anagraficaDocRef = doc(db, 'users', uid, 'anagrafica', uid);\n  try {\n    const docSnap = await getDoc(anagraficaDocRef);\n    if (docSnap.exists()) {\n      await updateDoc(anagraficaDocRef, {\n        cognome: cognome,\n        nome: nome,\n        sesso: sesso,\n        data_nasc: data_nasc,\n        luogo_nasc: luogo_nasc,\n        prov_nasc: prov_nasc,\n        cf: cf,\n        luogo_resid: luogo_resid,\n        prov_resid: prov_resid,\n        via_resid: via_resid,\n        telefono: telefono,\n        email: email\n      });\n      return {\n        success: true,\n        message: \"Aggiornamento completato con successo\"\n      };\n    } else {\n      return {\n        success: false,\n        message: \"Il documento dell'anagrafica non esiste\"\n      };\n    }\n  } catch (error) {\n    console.error(\"Errore durante l'aggiornamento dei dati:\", error);\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n}","map":{"version":3,"names":["doc","getDoc","setDoc","updateDoc","getDocs","where","auth","db","signUpUser","email","password","nome","cognome","sesso","telefono","cf","data_nasc","luogo_nasc","prov_nasc","luogo_resid","prov_resid","via_resid","ruolo","userCredential","createUserWithEmailAndPassword","uid","user","userDocRef","anagraficaDocRef","localStorage","setItem","success","message","error","console","fetchUser","userRef","q","query","querySnapshot","empty","Error","docs","data","id","updateUser","docSnap","exists"],"sources":["/Users/angelamariaselvaggi/Desktop/unimeri/Tesi/Applicazione/APP MERI/src/context/UserContext.js"],"sourcesContent":["import {doc, getDoc, setDoc, updateDoc, getDocs, where} from \"firebase/firestore\";\nimport {auth, db} from \"../config/firebase-config\";\n\n/*\n Funzione che si occupa di memorizzare i dati di un profilo utente su Firestore Database\n */\n\n export async function signUpUser(email, password, nome, cognome, sesso, telefono, cf, data_nasc, luogo_nasc, prov_nasc, luogo_resid, prov_resid, via_resid, ruolo) {\n    try {\n        const userCredential = await auth.createUserWithEmailAndPassword(email, password);\n        const uid = userCredential.user.uid;\n\n        const userDocRef = doc(db, 'users', uid);\n        const anagraficaDocRef = doc(db, 'users', uid, 'anagrafica', uid);\n\n        await setDoc(userDocRef, {\n            email: email,\n            nome: nome,\n            ruolo: ruolo\n        });\n\n        localStorage.setItem('user', nome);\n        localStorage.setItem('role', ruolo);\n\n        await setDoc(anagraficaDocRef, {\n            cognome: cognome,\n            nome: nome,\n            sesso: sesso,\n            data_nasc: data_nasc,\n            luogo_nasc: luogo_nasc,\n            prov_nasc: prov_nasc,\n            cf: cf,\n            luogo_resid: luogo_resid,\n            prov_resid: prov_resid,\n            via_resid: via_resid,\n            telefono: telefono,\n            email: email,\n            ruolo: ruolo,\n        });\n\n        return { success: true, message: \"Registrazione completata con successo\" };\n    } catch (error) {\n        console.error('Errore durante la registrazione dell\\'utente:', error.message);\n        return { success: false, message: error.message };\n    }\n}\n\n/*export async function fetchUser(uid) {\n    try {\n        const anagraficaDocRef = doc(db, 'users', uid, 'anagrafica', uid);\n        const docSnap = await getDoc(anagraficaDocRef);\n\n        if (docSnap.exists()) {\n            return docSnap.data();\n        } else {\n            console.log(\"Nessun documento trovato con l'UID inserito nella collezione 'anagrafica'!\");\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Errore durante la lettura dei dati:\", error);\n        return null;\n    }\n}*/\nexport const fetchUser = async (uid) => {\n    const userRef = doc(db, \"users\");\n    const q = query(userRef, where(\"uid\", \"==\", uid));\n    const querySnapshot = await getDocs(q);\n  \n    if (querySnapshot.empty) {\n      throw new Error(\"Utente non trovato\");\n    }\n  \n    const user = querySnapshot.docs[0].data();\n    return { ...user, uid: querySnapshot.docs[0].id };\n  };\n\nexport async function updateUser(uid, nome, cognome, sesso, data_nasc, luogo_nasc, prov_nasc, cf, luogo_resid, prov_resid, via_resid, telefono, email) {\n    const anagraficaDocRef = doc(db, 'users', uid, 'anagrafica', uid);\n\n    try {\n        const docSnap = await getDoc(anagraficaDocRef);\n\n        if (docSnap.exists()) {\n            await updateDoc(anagraficaDocRef, {\n                cognome: cognome,\n                nome: nome,\n                sesso: sesso,\n                data_nasc: data_nasc,\n                luogo_nasc: luogo_nasc,\n                prov_nasc: prov_nasc,\n                cf: cf,\n                luogo_resid: luogo_resid,\n                prov_resid: prov_resid,\n                via_resid: via_resid,\n                telefono: telefono,\n                email: email\n            });\n\n            return { success: true, message: \"Aggiornamento completato con successo\" };\n        } else {\n            return { success: false, message: \"Il documento dell'anagrafica non esiste\" };\n        }\n    } catch (error) {\n        console.error(\"Errore durante l'aggiornamento dei dati:\", error);\n        return { success: false, message: error.message };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
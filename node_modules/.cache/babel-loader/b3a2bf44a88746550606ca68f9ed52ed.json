{"ast":null,"code":"import { deleteDoc, doc, getDoc, setDoc, updateDoc } from \"firebase/firestore\";\nimport { db, auth } from \"../config/firebase-config\";\n\n//Funzione che si occupa di memorizzare i dati di un paziente su Firestore Database\n\n/*export async function addPatient(formData, paziente) {\n   //formData.data_inserimento = serverTimestamp();\n   //formData.email_paziente = paziente.email_paziente;\n   //formData.numero_telefono_paziente = paziente.numero_telefono_paziente;\n   const userDocRef = doc(db, 'users');\n   //await setDoc(doc(collection(db, \"users\")), formData);\n    await setDoc(userDocRef, {\n       email: formData.email_paziente,\n       nome: formData.nome_paziente,\n       ruolo: \"Utente\"\n   });\n} */\n\nconst crypto = require('crypto');\nexport function generateRandomPassword() {\n  return crypto.randomBytes(8).toString('hex');\n}\nexport async function createPatient(uidCurr, formData) {\n  try {\n    // Genera una password casuale\n    const randomPassword = generateRandomPassword();\n\n    // Crea l'account con la password casuale\n    const patientUserCredential = await auth.createUserWithEmailAndPassword(formData.email, randomPassword);\n    const uidPatient = patientUserCredential.user.uid;\n    // Invia un'email al paziente con il link per la modifica della password\n    await auth.sendPasswordResetEmail(formData.email);\n    const userDocRef = doc(db, 'users', uidPatient);\n    // Salva il ruolo dell'utente come \"paziente\" nel database Firestore\n    await setDoc(userDocRef, {\n      email: formData.email,\n      role: 'Utente',\n      nutrizionistaId: uidCurr\n      // Altri dati del paziente\n    });\n    return {\n      success: true,\n      message: 'Paziente registrato con successo. Email inviata per la modifica della password.'\n    };\n  } catch (error) {\n    console.error('Errore durante la registrazione del paziente:', error.message);\n    return {\n      success: false,\n      message: error.message\n    };\n    //throw error;\n  }\n}\n;\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente è giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n  await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n  await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\nexport async function getPatient(email_paziente) {\n  const docRef = doc(db, \"users\", email_paziente);\n  const docSnap = await getDoc(docRef);\n  if (docSnap.exists()) {\n    console.log(\"Documento letto correttamente \");\n    console.log(docSnap.data());\n    return docSnap.data();\n  } else {\n    console.log(\"Nessun documento trovato con il codice fiscale inserito!\");\n  }\n}","map":{"version":3,"names":["deleteDoc","doc","getDoc","setDoc","updateDoc","db","auth","crypto","require","generateRandomPassword","randomBytes","toString","createPatient","uidCurr","formData","randomPassword","patientUserCredential","createUserWithEmailAndPassword","email","uidPatient","user","uid","sendPasswordResetEmail","userDocRef","role","nutrizionistaId","success","message","error","console","updateTelephone","email_paziente","deleteDiet","getPatient","docRef","docSnap","exists","log","data"],"sources":["/Users/angelamariaselvaggi/Desktop/unimeri/Tesi/Applicazione/APP MERI/src/context/PatientContext.js"],"sourcesContent":["import {deleteDoc, doc, getDoc, setDoc, updateDoc} from \"firebase/firestore\";\nimport {db, auth} from \"../config/firebase-config\";\n\n\n //Funzione che si occupa di memorizzare i dati di un paziente su Firestore Database\n \n /*export async function addPatient(formData, paziente) {\n    //formData.data_inserimento = serverTimestamp();\n    //formData.email_paziente = paziente.email_paziente;\n    //formData.numero_telefono_paziente = paziente.numero_telefono_paziente;\n    const userDocRef = doc(db, 'users');\n    //await setDoc(doc(collection(db, \"users\")), formData);\n\n    await setDoc(userDocRef, {\n        email: formData.email_paziente,\n        nome: formData.nome_paziente,\n        ruolo: \"Utente\"\n    });\n} */\n\nconst crypto = require('crypto');\nexport function generateRandomPassword() {\n    return crypto.randomBytes(8).toString('hex');\n  }\n  \n  export async function createPatient(uidCurr, formData) {\n      try {\n           // Genera una password casuale\n      const randomPassword = generateRandomPassword();\n  \n      // Crea l'account con la password casuale\n      const patientUserCredential = await auth.createUserWithEmailAndPassword(formData.email, randomPassword);\n      const uidPatient = patientUserCredential.user.uid;\n      // Invia un'email al paziente con il link per la modifica della password\n      await auth.sendPasswordResetEmail(formData.email);\n      const userDocRef = doc(db, 'users', uidPatient);\n      // Salva il ruolo dell'utente come \"paziente\" nel database Firestore\n      await setDoc(userDocRef, {\n        email: formData.email,\n        role: 'Utente',\n        nutrizionistaId: uidCurr,\n        // Altri dati del paziente\n      });\n  \n      return { success: true, message:'Paziente registrato con successo. Email inviata per la modifica della password.'};\n    } catch (error) {\n      console.error('Errore durante la registrazione del paziente:', error.message);\n      return {success: false, message: error.message};\n      //throw error;\n  } \n      };\n\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente è giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n    await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\n export async function getPatient(email_paziente) {\n    const docRef = doc(db, \"users\", email_paziente);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n        console.log(\"Documento letto correttamente \");\n        console.log(docSnap.data());\n        return docSnap.data();\n    } else {\n        console.log((\"Nessun documento trovato con il codice fiscale inserito!\"));\n    }\n}"],"mappings":"AAAA,SAAQA,SAAS,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,QAAO,oBAAoB;AAC5E,SAAQC,EAAE,EAAEC,IAAI,QAAO,2BAA2B;;AAGjD;;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,OAAO,SAASC,sBAAsBA,CAAA,EAAG;EACrC,OAAOF,MAAM,CAACG,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;AAC9C;AAEA,OAAO,eAAeC,aAAaA,CAACC,OAAO,EAAEC,QAAQ,EAAE;EACnD,IAAI;IACC;IACL,MAAMC,cAAc,GAAGN,sBAAsB,CAAC,CAAC;;IAE/C;IACA,MAAMO,qBAAqB,GAAG,MAAMV,IAAI,CAACW,8BAA8B,CAACH,QAAQ,CAACI,KAAK,EAAEH,cAAc,CAAC;IACvG,MAAMI,UAAU,GAAGH,qBAAqB,CAACI,IAAI,CAACC,GAAG;IACjD;IACA,MAAMf,IAAI,CAACgB,sBAAsB,CAACR,QAAQ,CAACI,KAAK,CAAC;IACjD,MAAMK,UAAU,GAAGtB,GAAG,CAACI,EAAE,EAAE,OAAO,EAAEc,UAAU,CAAC;IAC/C;IACA,MAAMhB,MAAM,CAACoB,UAAU,EAAE;MACvBL,KAAK,EAAEJ,QAAQ,CAACI,KAAK;MACrBM,IAAI,EAAE,QAAQ;MACdC,eAAe,EAAEZ;MACjB;IACF,CAAC,CAAC;IAEF,OAAO;MAAEa,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAC;IAAiF,CAAC;EACpH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAACD,OAAO,CAAC;IAC7E,OAAO;MAACD,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAEC,KAAK,CAACD;IAAO,CAAC;IAC/C;EACJ;AACI;AAAC;;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,eAAeG,eAAeA,CAAChB,QAAQ,EAAEiB,cAAc,EAAE;EAC5D,MAAM3B,SAAS,CAACH,GAAG,CAACI,EAAE,EAAE,OAAO,EAAE0B,cAAc,CAAC,EAAEjB,QAAQ,CAAC;AAC/D;;AAEA;AACA;AACA;AACA,OAAO,eAAekB,UAAUA,CAACD,cAAc,EAAE;EAC7C,MAAM/B,SAAS,CAACC,GAAG,CAACI,EAAE,EAAE,OAAO,EAAE0B,cAAc,CAAC,CAAC;AACrD;;AAEA;AACA;AACA;AACC,OAAO,eAAeE,UAAUA,CAACF,cAAc,EAAE;EAC9C,MAAMG,MAAM,GAAGjC,GAAG,CAACI,EAAE,EAAE,OAAO,EAAE0B,cAAc,CAAC;EAC/C,MAAMI,OAAO,GAAG,MAAMjC,MAAM,CAACgC,MAAM,CAAC;EACpC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;IAClBP,OAAO,CAACQ,GAAG,CAAC,gCAAgC,CAAC;IAC7CR,OAAO,CAACQ,GAAG,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC,CAAC;IAC3B,OAAOH,OAAO,CAACG,IAAI,CAAC,CAAC;EACzB,CAAC,MAAM;IACHT,OAAO,CAACQ,GAAG,CAAE,0DAA2D,CAAC;EAC7E;AACJ"},"metadata":{},"sourceType":"module"}
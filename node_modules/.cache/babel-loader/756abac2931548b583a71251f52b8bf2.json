{"ast":null,"code":"import { deleteDoc, doc, getDoc, setDoc, updateDoc } from \"firebase/firestore\";\nimport { db, auth } from \"../config/firebase-config\";\nimport { useAuth } from \"./AuthContext.js\";\nimport { fetchUser } from \"./UserContext.js\";\nconst crypto = require('crypto');\nexport function generateRandomPassword() {\n  return crypto.randomBytes(8).toString('hex');\n}\nexport async function createPatient(uidCurr, formData) {\n  try {\n    // Genera una password casuale\n    const randomPassword = generateRandomPassword();\n    // Crea l'account con la password casuale\n    const currentUID = localStorage.getItem('user');\n    const patientUserCredential = await auth.createUserWithEmailAndPassword(formData.email_paziente, randomPassword);\n    const uidPatient = patientUserCredential.user.uid;\n    const userDocRef = doc(db, 'users', uidPatient);\n    const anagraficaDocRef = doc(db, 'users', uidPatient, 'anagrafica', uidPatient);\n    const anamnesiDocRef = doc(db, 'users', uidPatient, 'anamnesi', uidPatient);\n    const esamiDocRef = doc(db, 'users', uidPatient, 'esami', uidPatient);\n    const misureAntroDocRef = doc(db, 'users', uidPatient, 'misureantropometriche', uidPatient);\n    const misureDocRef = doc(db, 'users', uidPatient, 'misure', uidPatient);\n    const currentUserDocRec = doc(db, 'users', currentUID);\n    const updateData = {\n      pazienti: arrayUnion(uidPatient)\n    };\n    // Invia un'email al paziente con il link per la modifica della password\n    await auth.sendPasswordResetEmail(formData.email_paziente);\n\n    // Salva il ruolo dell'utente come \"paziente\" nel database Firestore\n    await setDoc(userDocRef, {\n      email: formData.email_paziente,\n      role: 'Utente',\n      nutrizionistaId: uidCurr\n      // Altri dati del paziente\n    });\n    updateDoc(nutrizionistaDocRef, updateData).then(() => {\n      console.log(\"Campo pazienti aggiunto con successo al documento del nutrizionista!\");\n    }).catch(error => {\n      console.error(\"Errore durante l'aggiornamento del campo pazienti:\", error);\n    });\n    await setDoc(anagraficaDocRef, {\n      cognome: formData.cognome_paziente,\n      nome: formData.nome_paziente,\n      sesso: formData.sesso_paziente,\n      data_nasc: formData.data_nascita_paziente,\n      luogo_nasc: formData.luogo_nascita_paziente,\n      prov_nasc: formData.provincia_nasc_paziente,\n      cf: formData.codice_fiscale_paziente,\n      luogo_resid: formData.citta_resid_paziente,\n      prov_resid: formData.provincia_resid_paziente,\n      via_resid: formData.via_residenza_paziente,\n      telefono: formData.numero_telefono_paziente,\n      email: formData.email_paziente,\n      ruolo: \"Utente\",\n      email_nutrizionista: currentUID /*devo modificare currentUID con l'email*/\n    });\n    await setDoc(anamnesiDocRef, {\n      note_anamnesi: formData.note_anamnesi\n    });\n    await setDoc(esamiDocRef, {\n      esami_effettuati: formData.esami_effettuati,\n      esami_prescritti: formData.esami_prescritti\n    });\n    await setDoc(misureAntroDocRef, {\n      peso_paziente: formData.peso_paziente,\n      altezza_paziente: formData.altezza_paziente,\n      circ_fianchi: formData.circ_fianchi,\n      circ_braccia: formData.circ_braccia,\n      circ_cosce: formData.circ_cosce,\n      circ_vita: formData.circ_vita,\n      circ_spalle: formData.circ_spalle,\n      circ_torace: formData.circ_torace,\n      circ_testa: formData.circ_testa,\n      circ_collo: formData.circ_collo,\n      obiettivo_peso: formData.obiettivo_peso,\n      obiett_fianchi: formData.obiett_fianchi,\n      obiett_braccia: formData.obiett_vita,\n      obiett_cosce: formData.obiett_cosce,\n      obiett_vita: formData.obiett_vita,\n      obiett_spalle: formData.obiett_spalle,\n      obiett_torace: formData.obiett_torace,\n      obiett_testa: formData.obiett_testa,\n      obiett_collo: formData.obiett_collo\n    });\n    await setDoc(misureDocRef, {\n      carenze_vitam: formData.carenze_vitam,\n      acqua_intrace: formData.acqua_intrace,\n      acqua_extrace: formData.acqua_extrace,\n      massa_met_att: formData.massa_met_att,\n      met_basale: formData.met_basale,\n      massa_magra: formData.massa_magra,\n      massa_grassa: formData.massa_grassa,\n      angolo_bia: formData.angolo_bia,\n      obiett_acqua_intrace: formData.obiett_acqua_intrace,\n      obiett_acqua_extrace: formData.obiett_acqua_extrace,\n      obiett_massa_met_att: formData.obiett_massa_met_att,\n      obiett_met_basale: formData.obiett_met_basale,\n      obiett_massa_magra: formData.obiett_massa_magra,\n      obiett_massa_grassa: formData.obiett_massa_grassa,\n      obiett_angolo_bia: formData.obiett_angolo_bia\n    });\n    return {\n      success: true,\n      message: 'Paziente registrato con successo. Email inviata per la modifica della password.',\n      uidPatient\n    };\n  } catch (error) {\n    console.error('Errore durante la registrazione del paziente:', error.message);\n    return {\n      success: false,\n      message: error.message,\n      uidPatient: null\n    };\n    //throw error;\n  }\n}\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente Ã¨ giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n  await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n  await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\nexport async function getPatient(email_paziente) {\n  const docRef = doc(db, \"users\", email_paziente);\n  const docSnap = await getDoc(docRef);\n  if (docSnap.exists()) {\n    console.log(\"Documento letto correttamente \");\n    console.log(docSnap.data());\n    return docSnap.data();\n  } else {\n    console.log(\"Nessun documento trovato con il codice fiscale inserito!\");\n  }\n}","map":{"version":3,"names":["deleteDoc","doc","getDoc","setDoc","updateDoc","db","auth","useAuth","fetchUser","crypto","require","generateRandomPassword","randomBytes","toString","createPatient","uidCurr","formData","randomPassword","currentUID","localStorage","getItem","patientUserCredential","createUserWithEmailAndPassword","email_paziente","uidPatient","user","uid","userDocRef","anagraficaDocRef","anamnesiDocRef","esamiDocRef","misureAntroDocRef","misureDocRef","currentUserDocRec","updateData","pazienti","arrayUnion","sendPasswordResetEmail","email","role","nutrizionistaId","nutrizionistaDocRef","then","console","log","catch","error","cognome","cognome_paziente","nome","nome_paziente","sesso","sesso_paziente","data_nasc","data_nascita_paziente","luogo_nasc","luogo_nascita_paziente","prov_nasc","provincia_nasc_paziente","cf","codice_fiscale_paziente","luogo_resid","citta_resid_paziente","prov_resid","provincia_resid_paziente","via_resid","via_residenza_paziente","telefono","numero_telefono_paziente","ruolo","email_nutrizionista","note_anamnesi","esami_effettuati","esami_prescritti","peso_paziente","altezza_paziente","circ_fianchi","circ_braccia","circ_cosce","circ_vita","circ_spalle","circ_torace","circ_testa","circ_collo","obiettivo_peso","obiett_fianchi","obiett_braccia","obiett_vita","obiett_cosce","obiett_spalle","obiett_torace","obiett_testa","obiett_collo","carenze_vitam","acqua_intrace","acqua_extrace","massa_met_att","met_basale","massa_magra","massa_grassa","angolo_bia","obiett_acqua_intrace","obiett_acqua_extrace","obiett_massa_met_att","obiett_met_basale","obiett_massa_magra","obiett_massa_grassa","obiett_angolo_bia","success","message","updateTelephone","deleteDiet","getPatient","docRef","docSnap","exists","data"],"sources":["/Users/angelamariaselvaggi/Desktop/unimeri/Tesi/Applicazione/APP MERI/src/context/PatientContext.js"],"sourcesContent":["import {deleteDoc, doc, getDoc, setDoc, updateDoc} from \"firebase/firestore\";\nimport {db, auth} from \"../config/firebase-config\";\nimport {useAuth} from \"./AuthContext.js\";\nimport {fetchUser} from \"./UserContext.js\";\n\nconst crypto = require('crypto');\n\nexport function generateRandomPassword() {\n    return crypto.randomBytes(8).toString('hex');\n  }\n\nexport async function createPatient(uidCurr, formData) {\n      try {\n           // Genera una password casuale\n      const randomPassword = generateRandomPassword();\n      // Crea l'account con la password casuale\n      const currentUID = localStorage.getItem('user');\n      const patientUserCredential = await auth.createUserWithEmailAndPassword(formData.email_paziente, randomPassword);\n      const uidPatient = patientUserCredential.user.uid;\n      const userDocRef = doc(db, 'users', uidPatient);\n      const anagraficaDocRef = doc(db, 'users', uidPatient, 'anagrafica', uidPatient);\n      const anamnesiDocRef = doc(db, 'users', uidPatient, 'anamnesi', uidPatient);\n      const esamiDocRef = doc(db, 'users', uidPatient, 'esami', uidPatient);\n      const misureAntroDocRef = doc(db, 'users', uidPatient, 'misureantropometriche', uidPatient);\n      const misureDocRef = doc(db, 'users', uidPatient, 'misure', uidPatient);\n      const currentUserDocRec =  doc(db, 'users', currentUID);\n      const updateData = {\n        pazienti: arrayUnion(uidPatient),\n      };\n      // Invia un'email al paziente con il link per la modifica della password\n      await auth.sendPasswordResetEmail(formData.email_paziente);\n     \n      // Salva il ruolo dell'utente come \"paziente\" nel database Firestore\n      await setDoc(userDocRef, {\n        email: formData.email_paziente,\n        role: 'Utente',\n        nutrizionistaId: uidCurr,\n        // Altri dati del paziente\n      });\n      updateDoc(nutrizionistaDocRef, updateData)\n      .then(() => {\n        console.log(\"Campo pazienti aggiunto con successo al documento del nutrizionista!\");\n      })\n      .catch((error) => {\n        console.error(\"Errore durante l'aggiornamento del campo pazienti:\", error);\n      });\n      await setDoc(anagraficaDocRef,{\n      cognome: formData.cognome_paziente,\n      nome: formData.nome_paziente,\n      sesso: formData.sesso_paziente,\n      data_nasc: formData.data_nascita_paziente,\n      luogo_nasc: formData.luogo_nascita_paziente,\n      prov_nasc: formData.provincia_nasc_paziente,\n      cf: formData.codice_fiscale_paziente,\n      luogo_resid: formData.citta_resid_paziente,\n      prov_resid: formData.provincia_resid_paziente,\n      via_resid: formData.via_residenza_paziente,\n      telefono: formData.numero_telefono_paziente,\n      email: formData.email_paziente,\n      ruolo: \"Utente\",\n      email_nutrizionista: currentUID, /*devo modificare currentUID con l'email*/\n      \n      });\n\n      await setDoc(anamnesiDocRef,{\n        note_anamnesi: formData.note_anamnesi,\n      });\n\n      await setDoc(esamiDocRef, {\n        esami_effettuati: formData.esami_effettuati,\n        esami_prescritti: formData.esami_prescritti,\n      });\n\n      await setDoc(misureAntroDocRef, {\n        peso_paziente: formData.peso_paziente,\n        altezza_paziente: formData.altezza_paziente,\n        circ_fianchi: formData.circ_fianchi,\n        circ_braccia: formData.circ_braccia,\n        circ_cosce: formData.circ_cosce,\n        circ_vita: formData.circ_vita,  \n        circ_spalle: formData.circ_spalle,\n        circ_torace: formData.circ_torace,\n        circ_testa: formData.circ_testa,\n        circ_collo: formData.circ_collo,\n        obiettivo_peso: formData.obiettivo_peso,\n        obiett_fianchi: formData.obiett_fianchi,\n        obiett_braccia: formData.obiett_vita,\n        obiett_cosce: formData.obiett_cosce,\n        obiett_vita: formData.obiett_vita,  \n        obiett_spalle: formData.obiett_spalle,\n        obiett_torace: formData.obiett_torace,\n        obiett_testa: formData.obiett_testa,\n        obiett_collo: formData.obiett_collo,\n      });\n\n      await setDoc(misureDocRef, {\n        carenze_vitam: formData.carenze_vitam,\n        acqua_intrace:formData.acqua_intrace,\n        acqua_extrace: formData.acqua_extrace,\n        massa_met_att: formData.massa_met_att,\n        met_basale: formData.met_basale,\n        massa_magra: formData.massa_magra,\n        massa_grassa: formData.massa_grassa,\n        angolo_bia: formData.angolo_bia,\n        obiett_acqua_intrace: formData.obiett_acqua_intrace,\n        obiett_acqua_extrace: formData.obiett_acqua_extrace,\n        obiett_massa_met_att: formData.obiett_massa_met_att,\n        obiett_met_basale: formData.obiett_met_basale,\n        obiett_massa_magra: formData.obiett_massa_magra,\n        obiett_massa_grassa: formData.obiett_massa_grassa,\n        obiett_angolo_bia: formData.obiett_angolo_bia,\n      });\n\n      return { success: true, message:'Paziente registrato con successo. Email inviata per la modifica della password.', uidPatient};\n    } catch (error) {\n      console.error('Errore durante la registrazione del paziente:', error.message);\n      return {success: false, message: error.message, uidPatient: null};\n      //throw error;\n  } \n}\n\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente Ã¨ giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n    await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\n export async function getPatient(email_paziente) {\n    const docRef = doc(db, \"users\", email_paziente);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n        console.log(\"Documento letto correttamente \");\n        console.log(docSnap.data());\n        return docSnap.data();\n    } else {\n        console.log((\"Nessun documento trovato con il codice fiscale inserito!\"));\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import{collection,deleteDoc,doc,getDoc,serverTimestamp,setDoc,updateDoc}from\"firebase/firestore\";import{db}from\"../config/firebase-config\";/*\n Funzione che si occupa di memorizzare i dati di un paziente su Firestore Database\n */export async function addPatient(formData,paziente){//formData.data_inserimento = serverTimestamp();\n//formData.email_paziente = paziente.email_paziente;\n//formData.numero_telefono_paziente = paziente.numero_telefono_paziente;\nconst userDocRef=doc(db,'users');//await setDoc(doc(collection(db, \"users\")), formData);\nawait setDoc(userDocRef,{email:formData.email_paziente,nome:formData.nome_paziente,ruolo:\"Paziente\"});}/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */ /*vedere se email_paziente è giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */ /*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */export async function updateTelephone(formData,email_paziente){await updateDoc(doc(db,\"users\",email_paziente),formData);}/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */export async function deleteDiet(email_paziente){await deleteDoc(doc(db,\"users\",email_paziente));}/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */export async function getPatient(email_paziente){const docRef=doc(db,\"users\",email_paziente);const docSnap=await getDoc(docRef);if(docSnap.exists()){console.log(\"Documento letto correttamente \");console.log(docSnap.data());return docSnap.data();}else{console.log(\"Nessun documento trovato con il codice fiscale inserito!\");}}","map":{"version":3,"names":["collection","deleteDoc","doc","getDoc","serverTimestamp","setDoc","updateDoc","db","addPatient","formData","paziente","userDocRef","email","email_paziente","nome","nome_paziente","ruolo","updateTelephone","deleteDiet","getPatient","docRef","docSnap","exists","console","log","data"],"sources":["/Users/angelamariaselvaggi/Desktop/unimeri/Tesi/Applicazione/APP MERI/src/context/PatientContext.js"],"sourcesContent":["import {collection, deleteDoc, doc, getDoc, serverTimestamp, setDoc, updateDoc} from \"firebase/firestore\";\nimport {db} from \"../config/firebase-config\";\n\n/*\n Funzione che si occupa di memorizzare i dati di un paziente su Firestore Database\n */\n export async function addPatient(formData, paziente) {\n    //formData.data_inserimento = serverTimestamp();\n    //formData.email_paziente = paziente.email_paziente;\n    //formData.numero_telefono_paziente = paziente.numero_telefono_paziente;\n    const userDocRef = doc(db, 'users');\n    //await setDoc(doc(collection(db, \"users\")), formData);\n\n    await setDoc(userDocRef, {\n        email: formData.email_paziente,\n        nome: formData.nome_paziente,\n        ruolo: \"Paziente\"\n    });\n}\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente è giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n    await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\n export async function getPatient(email_paziente) {\n    const docRef = doc(db, \"users\", email_paziente);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n        console.log(\"Documento letto correttamente \");\n        console.log(docSnap.data());\n        return docSnap.data();\n    } else {\n        console.log((\"Nessun documento trovato con il codice fiscale inserito!\"));\n    }\n}"],"mappings":"AAAA,OAAQA,UAAU,CAAEC,SAAS,CAAEC,GAAG,CAAEC,MAAM,CAAEC,eAAe,CAAEC,MAAM,CAAEC,SAAS,KAAO,oBAAoB,CACzG,OAAQC,EAAE,KAAO,2BAA2B,CAE5C;AACA;AACA,GACC,MAAO,eAAe,CAAAC,UAAUA,CAACC,QAAQ,CAAEC,QAAQ,CAAE,CAClD;AACA;AACA;AACA,KAAM,CAAAC,UAAU,CAAGT,GAAG,CAACK,EAAE,CAAE,OAAO,CAAC,CACnC;AAEA,KAAM,CAAAF,MAAM,CAACM,UAAU,CAAE,CACrBC,KAAK,CAAEH,QAAQ,CAACI,cAAc,CAC9BC,IAAI,CAAEL,QAAQ,CAACM,aAAa,CAC5BC,KAAK,CAAE,UACX,CAAC,CAAC,CACN,CAEA;AACA;AACA,GAFA,CAGA;AACA;AACA;AACA;AACA,IAJA,CAMA;AACA;AACA,GACA,MAAO,eAAe,CAAAC,eAAeA,CAACR,QAAQ,CAAEI,cAAc,CAAE,CAC5D,KAAM,CAAAP,SAAS,CAACJ,GAAG,CAACK,EAAE,CAAE,OAAO,CAAEM,cAAc,CAAC,CAAEJ,QAAQ,CAAC,CAC/D,CAEA;AACA;AACA,GACA,MAAO,eAAe,CAAAS,UAAUA,CAACL,cAAc,CAAE,CAC7C,KAAM,CAAAZ,SAAS,CAACC,GAAG,CAACK,EAAE,CAAE,OAAO,CAAEM,cAAc,CAAC,CAAC,CACrD,CAEA;AACA;AACA,GACC,MAAO,eAAe,CAAAM,UAAUA,CAACN,cAAc,CAAE,CAC9C,KAAM,CAAAO,MAAM,CAAGlB,GAAG,CAACK,EAAE,CAAE,OAAO,CAAEM,cAAc,CAAC,CAC/C,KAAM,CAAAQ,OAAO,CAAG,KAAM,CAAAlB,MAAM,CAACiB,MAAM,CAAC,CACpC,GAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,CAAE,CAClBC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC,CAC7CD,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC,CAC3B,MAAO,CAAAJ,OAAO,CAACI,IAAI,CAAC,CAAC,CACzB,CAAC,IAAM,CACHF,OAAO,CAACC,GAAG,CAAE,0DAA2D,CAAC,CAC7E,CACJ"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { deleteDoc, doc, getDoc, setDoc, updateDoc } from \"firebase/firestore\";\nimport { db, auth } from \"../config/firebase-config\";\nimport { useAuth } from \"./AuthContext.js\";\nimport { fetchUser } from \"./UserContext.js\";\n//Funzione che si occupa di memorizzare i dati di un paziente su Firestore Database\n\n/*export async function addPatient(formData, paziente) {\n   //formData.data_inserimento = serverTimestamp();\n   //formData.email_paziente = paziente.email_paziente;\n   //formData.numero_telefono_paziente = paziente.numero_telefono_paziente;\n   const userDocRef = doc(db, 'users');\n   //await setDoc(doc(collection(db, \"users\")), formData);\n    await setDoc(userDocRef, {\n       email: formData.email_paziente,\n       nome: formData.nome_paziente,\n       ruolo: \"Utente\"\n   });\n} */\nconst crypto = require('crypto');\nexport function generateRandomPassword() {\n  return crypto.randomBytes(8).toString('hex');\n}\nexport async function createPatient(uidCurr, formData) {\n  try {\n    // Genera una password casuale\n    const randomPassword = generateRandomPassword();\n    // Crea l'account con la password casuale\n    const currentUID = localStorage.getItem('user');\n    const patientUserCredential = await auth.createUserWithEmailAndPassword(formData.email.current.value, randomPassword);\n    const uidPatient = patientUserCredential.user.uid;\n    const userDocRef = doc(db, 'users', uidPatient);\n    const anagraficaDocRef = doc(db, 'users', uidPatient, 'anagrafica', uidPatient);\n    const anamnesiDocRef = doc(db, 'users', uidPatient, 'anamnesi', uidPatient);\n    const esamiDocRef = doc(db, 'users', uidPatient, 'esami', uidPatient);\n    const misureAntroDocRef = doc(db, 'users', uidPatient, 'misureantropometriche', uidPatient);\n    const misureDocRef = doc(db, 'users', uidPatient, 'misure', uidPatient);\n    // Invia un'email al paziente con il link per la modifica della password\n    await auth.sendPasswordResetEmail(formData.email.current.value);\n\n    // Salva il ruolo dell'utente come \"paziente\" nel database Firestore\n    await setDoc(userDocRef, {\n      email: formData.email,\n      role: 'Utente',\n      nutrizionistaId: uidCurr\n      // Altri dati del paziente\n    });\n    await setDoc(anagraficaDocRef, {\n      cognome: formData.cognome,\n      nome: formData.nome,\n      sesso: formData.sesso,\n      data_nasc: formData.data_nasc,\n      luogo_nasc: formData.luogo_nasc,\n      prov_nasc: formData.prov_nasc,\n      cf: formData.cf,\n      luogo_resid: formData.luogo_resid,\n      prov_resid: formData.prov_resid,\n      via_resid: formData.via_resid,\n      telefono: formData.telefono,\n      email: formData.email,\n      ruolo: \"Paziente\",\n      email_nutrizionista: currentUID\n    });\n    await setDoc(esamiDocRef, {\n      esami_effettuati: formData.esami_effettuati,\n      esami_prescritti: formData.esami_prescritti\n    });\n    await setDoc(misureAntroDocRef, {\n      peso_paziente: formData.peso_paziente,\n      altezza_paziente: formData.altezza_paziente,\n      circ_fianchi: formData.circ_fianchi,\n      circ_braccia: formData.circ_braccia,\n      circ_cosce: formData.circ_cosce,\n      circ_vita: formData.circ_vita,\n      circ_spalle: formData.circ_spalle,\n      circ_torace: formData.circ_torace,\n      circ_testa: formData.circ_testa,\n      circ_collo: formData.circ_collo,\n      obiettivo_peso: formData.obiettivo_peso,\n      obiett_fianchi: formData.obiett_fianchi,\n      obiett_braccia: formData.obiett_vita,\n      obiett_cosce: formData.obiett_cosce,\n      obiett_vita: formData.obiett_vita,\n      obiett_spalle: formData.obiett_spalle,\n      obiett_torace: formData.obiett_torace,\n      obiett_testa: formData.obiett_testa,\n      obiett_collo: formData.obiett_collo\n    });\n    await setDoc(misureDocRef, {\n      carenze_vitam: formData.carenze_vitam,\n      acqua_intrace: formData.acqua_intrace,\n      acqua_extrace: formData.acqua_extrace,\n      massa_met_att: formData.massa_met_att,\n      met_basale: formData.met_basale,\n      massa_magra: formData.massa_magra,\n      massa_grassa: formData.massa_grassa,\n      angolo_bia: formData.angolo_bia,\n      obiett_acqua_intrace: formData.obiett_acqua_intrace,\n      obiett_acqua_extrace: formData.obiett_acqua_extrace,\n      obiett_massa_met_att: formData.obiett_massa_met_att,\n      obiett_met_basale: formData.obiett_met_basale,\n      obiett_massa_magra: formData.obiett_massa_magra,\n      obiett_massa_grassa: formData.obiett_massa_grassa,\n      obiett_angolo_bia: formData.obiett_angolo_bia\n    });\n    return {\n      success: true,\n      message: 'Paziente registrato con successo. Email inviata per la modifica della password.',\n      uidPatient\n    };\n  } catch (error) {\n    console.error('Errore durante la registrazione del paziente:', error.message);\n    return {\n      success: false,\n      message: error.message,\n      uidPatient: null\n    };\n    //throw error;\n  }\n}\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente Ã¨ giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n  await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n  await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\nexport async function getPatient(email_paziente) {\n  const docRef = doc(db, \"users\", email_paziente);\n  const docSnap = await getDoc(docRef);\n  if (docSnap.exists()) {\n    console.log(\"Documento letto correttamente \");\n    console.log(docSnap.data());\n    return docSnap.data();\n  } else {\n    console.log(\"Nessun documento trovato con il codice fiscale inserito!\");\n  }\n}","map":{"version":3,"names":["deleteDoc","doc","getDoc","setDoc","updateDoc","db","auth","useAuth","fetchUser","crypto","require","generateRandomPassword","randomBytes","toString","createPatient","uidCurr","formData","randomPassword","currentUID","localStorage","getItem","patientUserCredential","createUserWithEmailAndPassword","email","current","value","uidPatient","user","uid","userDocRef","anagraficaDocRef","anamnesiDocRef","esamiDocRef","misureAntroDocRef","misureDocRef","sendPasswordResetEmail","role","nutrizionistaId","cognome","nome","sesso","data_nasc","luogo_nasc","prov_nasc","cf","luogo_resid","prov_resid","via_resid","telefono","ruolo","email_nutrizionista","esami_effettuati","esami_prescritti","peso_paziente","altezza_paziente","circ_fianchi","circ_braccia","circ_cosce","circ_vita","circ_spalle","circ_torace","circ_testa","circ_collo","obiettivo_peso","obiett_fianchi","obiett_braccia","obiett_vita","obiett_cosce","obiett_spalle","obiett_torace","obiett_testa","obiett_collo","carenze_vitam","acqua_intrace","acqua_extrace","massa_met_att","met_basale","massa_magra","massa_grassa","angolo_bia","obiett_acqua_intrace","obiett_acqua_extrace","obiett_massa_met_att","obiett_met_basale","obiett_massa_magra","obiett_massa_grassa","obiett_angolo_bia","success","message","error","console","updateTelephone","email_paziente","deleteDiet","getPatient","docRef","docSnap","exists","log","data"],"sources":["/Users/angelamariaselvaggi/Desktop/unimeri/Tesi/Applicazione/APP MERI/src/context/PatientContext.js"],"sourcesContent":["import {deleteDoc, doc, getDoc, setDoc, updateDoc} from \"firebase/firestore\";\nimport {db, auth} from \"../config/firebase-config\";\nimport {useAuth} from \"./AuthContext.js\";\nimport {fetchUser} from \"./UserContext.js\";\n //Funzione che si occupa di memorizzare i dati di un paziente su Firestore Database\n \n /*export async function addPatient(formData, paziente) {\n    //formData.data_inserimento = serverTimestamp();\n    //formData.email_paziente = paziente.email_paziente;\n    //formData.numero_telefono_paziente = paziente.numero_telefono_paziente;\n    const userDocRef = doc(db, 'users');\n    //await setDoc(doc(collection(db, \"users\")), formData);\n\n    await setDoc(userDocRef, {\n        email: formData.email_paziente,\n        nome: formData.nome_paziente,\n        ruolo: \"Utente\"\n    });\n} */\nconst crypto = require('crypto');\n\nexport function generateRandomPassword() {\n    return crypto.randomBytes(8).toString('hex');\n  }\n\nexport async function createPatient(uidCurr, formData) {\n      try {\n           // Genera una password casuale\n      const randomPassword = generateRandomPassword();\n      // Crea l'account con la password casuale\n      const currentUID = localStorage.getItem('user');\n      const patientUserCredential = await auth.createUserWithEmailAndPassword(formData.email.current.value, randomPassword);\n      const uidPatient = patientUserCredential.user.uid;\n      const userDocRef = doc(db, 'users', uidPatient);\n      const anagraficaDocRef = doc(db, 'users', uidPatient, 'anagrafica', uidPatient);\n      const anamnesiDocRef = doc(db, 'users', uidPatient, 'anamnesi', uidPatient);\n      const esamiDocRef = doc(db, 'users', uidPatient, 'esami', uidPatient);\n      const misureAntroDocRef = doc(db, 'users', uidPatient, 'misureantropometriche', uidPatient);\n      const misureDocRef = doc(db, 'users', uidPatient, 'misure', uidPatient);\n      // Invia un'email al paziente con il link per la modifica della password\n      await auth.sendPasswordResetEmail(formData.email.current.value);\n     \n      // Salva il ruolo dell'utente come \"paziente\" nel database Firestore\n      await setDoc(userDocRef, {\n        email: formData.email,\n        role: 'Utente',\n        nutrizionistaId: uidCurr,\n        // Altri dati del paziente\n      });\n      await setDoc(anagraficaDocRef,{\n      cognome: formData.cognome,\n      nome: formData.nome,\n      sesso: formData.sesso,\n      data_nasc: formData.data_nasc,\n      luogo_nasc: formData.luogo_nasc,\n      prov_nasc: formData.prov_nasc,\n      cf: formData.cf,\n      luogo_resid: formData.luogo_resid,\n      prov_resid: formData.prov_resid,\n      via_resid: formData.via_resid,\n      telefono: formData.telefono,\n      email: formData.email,\n      ruolo: \"Paziente\",\n      email_nutrizionista: currentUID,\n      });\n\n      await setDoc(esamiDocRef, {\n        esami_effettuati: formData.esami_effettuati,\n        esami_prescritti: formData.esami_prescritti,\n      });\n\n      await setDoc(misureAntroDocRef, {\n        peso_paziente: formData.peso_paziente,\n        altezza_paziente: formData.altezza_paziente,\n        circ_fianchi: formData.circ_fianchi,\n        circ_braccia: formData.circ_braccia,\n        circ_cosce: formData.circ_cosce,\n        circ_vita: formData.circ_vita,  \n        circ_spalle: formData.circ_spalle,\n        circ_torace: formData.circ_torace,\n        circ_testa: formData.circ_testa,\n        circ_collo: formData.circ_collo,\n        obiettivo_peso: formData.obiettivo_peso,\n        obiett_fianchi: formData.obiett_fianchi,\n        obiett_braccia: formData.obiett_vita,\n        obiett_cosce: formData.obiett_cosce,\n        obiett_vita: formData.obiett_vita,  \n        obiett_spalle: formData.obiett_spalle,\n        obiett_torace: formData.obiett_torace,\n        obiett_testa: formData.obiett_testa,\n        obiett_collo: formData.obiett_collo,\n      });\n\n      await setDoc(misureDocRef, {\n        carenze_vitam: formData.carenze_vitam,\n        acqua_intrace:formData.acqua_intrace,\n        acqua_extrace: formData.acqua_extrace,\n        massa_met_att: formData.massa_met_att,\n        met_basale: formData.met_basale,\n        massa_magra: formData.massa_magra,\n        massa_grassa: formData.massa_grassa,\n        angolo_bia: formData.angolo_bia,\n        obiett_acqua_intrace: formData.obiett_acqua_intrace,\n        obiett_acqua_extrace: formData.obiett_acqua_extrace,\n        obiett_massa_met_att: formData.obiett_massa_met_att,\n        obiett_met_basale: formData.obiett_met_basale,\n        obiett_massa_magra: formData.obiett_massa_magra,\n        obiett_massa_grassa: formData.obiett_massa_grassa,\n        obiett_angolo_bia: formData.obiett_angolo_bia,\n      });\n\n      return { success: true, message:'Paziente registrato con successo. Email inviata per la modifica della password.', uidPatient};\n    } catch (error) {\n      console.error('Errore durante la registrazione del paziente:', error.message);\n      return {success: false, message: error.message, uidPatient: null};\n      //throw error;\n  } \n}\n\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente Ã¨ giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n    await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\n export async function getPatient(email_paziente) {\n    const docRef = doc(db, \"users\", email_paziente);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n        console.log(\"Documento letto correttamente \");\n        console.log(docSnap.data());\n        return docSnap.data();\n    } else {\n        console.log((\"Nessun documento trovato con il codice fiscale inserito!\"));\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
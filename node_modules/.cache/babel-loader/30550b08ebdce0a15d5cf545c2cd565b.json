{"ast":null,"code":"import { collection, deleteDoc, doc, getDoc, serverTimestamp, setDoc, updateDoc } from \"firebase/firestore\";\nimport { db } from \"../config/firebase-config\";\n\n/*\n Funzione che si occupa di memorizzare i dati di un paziente su Firestore Database\n */\nexport async function addPatient(formData, paziente) {\n  //formData.data_inserimento = serverTimestamp();\n  //formData.email_paziente = paziente.email_paziente;\n  //formData.numero_telefono_paziente = paziente.numero_telefono_paziente;\n  const userDocRef = doc(db, 'users');\n  //await setDoc(doc(collection(db, \"users\")), formData);\n\n  await setDoc(userDocRef, {\n    email: formData.email_paziente,\n    nome: formData.nome_paziente,\n    ruolo: \"Paziente\"\n  });\n}\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente è giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n  await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n  await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\nexport async function getPatient(email_paziente) {\n  const docRef = doc(db, \"users\", email_paziente);\n  const docSnap = await getDoc(docRef);\n  if (docSnap.exists()) {\n    console.log(\"Documento letto correttamente \");\n    console.log(docSnap.data());\n    return docSnap.data();\n  } else {\n    console.log(\"Nessun documento trovato con il codice fiscale inserito!\");\n  }\n}","map":{"version":3,"names":["collection","deleteDoc","doc","getDoc","serverTimestamp","setDoc","updateDoc","db","addPatient","formData","paziente","userDocRef","email","email_paziente","nome","nome_paziente","ruolo","updateTelephone","deleteDiet","getPatient","docRef","docSnap","exists","console","log","data"],"sources":["/Users/angelamariaselvaggi/Desktop/unimeri/Tesi/Applicazione/APP MERI/src/context/PatientContext.js"],"sourcesContent":["import {collection, deleteDoc, doc, getDoc, serverTimestamp, setDoc, updateDoc} from \"firebase/firestore\";\nimport {db} from \"../config/firebase-config\";\n\n/*\n Funzione che si occupa di memorizzare i dati di un paziente su Firestore Database\n */\n export async function addPatient(formData, paziente) {\n    //formData.data_inserimento = serverTimestamp();\n    //formData.email_paziente = paziente.email_paziente;\n    //formData.numero_telefono_paziente = paziente.numero_telefono_paziente;\n    const userDocRef = doc(db, 'users');\n    //await setDoc(doc(collection(db, \"users\")), formData);\n\n    await setDoc(userDocRef, {\n        email: formData.email_paziente,\n        nome: formData.nome_paziente,\n        ruolo: \"Paziente\"\n    });\n}\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente è giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n    await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\n export async function getPatient(email_paziente) {\n    const docRef = doc(db, \"users\", email_paziente);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n        console.log(\"Documento letto correttamente \");\n        console.log(docSnap.data());\n        return docSnap.data();\n    } else {\n        console.log((\"Nessun documento trovato con il codice fiscale inserito!\"));\n    }\n}"],"mappings":"AAAA,SAAQA,UAAU,EAAEC,SAAS,EAAEC,GAAG,EAAEC,MAAM,EAAEC,eAAe,EAAEC,MAAM,EAAEC,SAAS,QAAO,oBAAoB;AACzG,SAAQC,EAAE,QAAO,2BAA2B;;AAE5C;AACA;AACA;AACC,OAAO,eAAeC,UAAUA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAClD;EACA;EACA;EACA,MAAMC,UAAU,GAAGT,GAAG,CAACK,EAAE,EAAE,OAAO,CAAC;EACnC;;EAEA,MAAMF,MAAM,CAACM,UAAU,EAAE;IACrBC,KAAK,EAAEH,QAAQ,CAACI,cAAc;IAC9BC,IAAI,EAAEL,QAAQ,CAACM,aAAa;IAC5BC,KAAK,EAAE;EACX,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,eAAeC,eAAeA,CAACR,QAAQ,EAAEI,cAAc,EAAE;EAC5D,MAAMP,SAAS,CAACJ,GAAG,CAACK,EAAE,EAAE,OAAO,EAAEM,cAAc,CAAC,EAAEJ,QAAQ,CAAC;AAC/D;;AAEA;AACA;AACA;AACA,OAAO,eAAeS,UAAUA,CAACL,cAAc,EAAE;EAC7C,MAAMZ,SAAS,CAACC,GAAG,CAACK,EAAE,EAAE,OAAO,EAAEM,cAAc,CAAC,CAAC;AACrD;;AAEA;AACA;AACA;AACC,OAAO,eAAeM,UAAUA,CAACN,cAAc,EAAE;EAC9C,MAAMO,MAAM,GAAGlB,GAAG,CAACK,EAAE,EAAE,OAAO,EAAEM,cAAc,CAAC;EAC/C,MAAMQ,OAAO,GAAG,MAAMlB,MAAM,CAACiB,MAAM,CAAC;EACpC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;IAClBC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC7CD,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;IAC3B,OAAOJ,OAAO,CAACI,IAAI,CAAC,CAAC;EACzB,CAAC,MAAM;IACHF,OAAO,CAACC,GAAG,CAAE,0DAA2D,CAAC;EAC7E;AACJ"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { deleteDoc, doc, getDoc, setDoc, arrayUnion, updateDoc } from \"firebase/firestore\";\nimport { db, auth } from \"../config/firebase-config\";\nimport { useAuth } from \"./AuthContext.js\";\nimport { fetchUser } from \"./UserContext.js\";\nconst crypto = require('crypto');\nexport function generateRandomPassword() {\n  return crypto.randomBytes(8).toString('hex');\n}\nexport async function createPatient(uidCurr, formData) {\n  _s();\n  try {\n    // Genera una password casuale\n    const randomPassword = generateRandomPassword();\n    // Crea l'account con la password casuale\n    const currentUID = localStorage.getItem('user');\n    const {\n      currentUser\n    } = useAuth();\n    const patientUserCredential = await auth.createUserWithEmailAndPassword(formData.email_paziente, randomPassword);\n    const uidPatient = patientUserCredential.user.uid;\n    const userDocRef = doc(db, 'users', uidPatient);\n    const anagraficaDocRef = doc(db, 'users', uidPatient, 'anagrafica', uidPatient);\n    const anamnesiDocRef = doc(db, 'users', uidPatient, 'anamnesi', uidPatient);\n    const esamiDocRef = doc(db, 'users', uidPatient, 'esami', uidPatient);\n    const misureAntroDocRef = doc(db, 'users', uidPatient, 'misureantropometriche', uidPatient);\n    const misureDocRef = doc(db, 'users', uidPatient, 'misure', uidPatient);\n    const nutrizionistaDocRef = doc(db, \"users\", currentUser.uid);\n    const nutrizionistaDoc = await getDoc(nutrizionistaDocRef);\n    // Invia un'email al paziente con il link per la modifica della password\n    await auth.sendPasswordResetEmail(formData.email_paziente);\n\n    // Salva il ruolo dell'utente come \"paziente\" nel database Firestore\n    await setDoc(userDocRef, {\n      email: formData.email_paziente,\n      role: 'Utente',\n      nutrizionistaId: uidCurr\n      // Altri dati del paziente\n    });\n    if (nutrizionistaDoc.exists()) {\n      // Il documento esiste, aggiungi l'ID del paziente all'array \"pazienti\"\n      const updateData = {\n        pazienti: arrayUnion(uidPatient)\n      };\n      // Aggiorna il documento del nutrizionista con il nuovo campo\n      await updateDoc(nutrizionistaDocRef, updateData);\n      console.log(\"Campo pazienti aggiunto con successo al documento del nutrizionista!\");\n    } else {\n      // Il documento non esiste, potresti considerare di crearlo prima di aggiungere il campo pazienti\n      await setDoc(nutrizionistaDocRef, {\n        pazienti: [uidPatient] // Inizia con un array contenente solo l'ID del paziente\n        // Altri dati del nutrizionista\n      });\n      console.log(\"Documento del nutrizionista creato con successo!\");\n    }\n    await setDoc(anagraficaDocRef, {\n      cognome: formData.cognome_paziente,\n      nome: formData.nome_paziente,\n      sesso: formData.sesso_paziente,\n      data_nasc: formData.data_nascita_paziente,\n      luogo_nasc: formData.luogo_nascita_paziente,\n      prov_nasc: formData.provincia_nasc_paziente,\n      cf: formData.codice_fiscale_paziente,\n      luogo_resid: formData.citta_resid_paziente,\n      prov_resid: formData.provincia_resid_paziente,\n      via_resid: formData.via_residenza_paziente,\n      telefono: formData.numero_telefono_paziente,\n      email: formData.email_paziente,\n      ruolo: \"Utente\",\n      email_nutrizionista: currentUID /*devo modificare currentUID con l'email*/\n    });\n    await setDoc(anamnesiDocRef, {\n      note_anamnesi: formData.note_anamnesi\n    });\n    await setDoc(esamiDocRef, {\n      esami_effettuati: formData.esami_effettuati,\n      esami_prescritti: formData.esami_prescritti\n    });\n    await setDoc(misureAntroDocRef, {\n      peso_paziente: formData.peso_paziente,\n      altezza_paziente: formData.altezza_paziente,\n      circ_fianchi: formData.circ_fianchi,\n      circ_braccia: formData.circ_braccia,\n      circ_cosce: formData.circ_cosce,\n      circ_vita: formData.circ_vita,\n      circ_spalle: formData.circ_spalle,\n      circ_torace: formData.circ_torace,\n      circ_testa: formData.circ_testa,\n      circ_collo: formData.circ_collo,\n      obiettivo_peso: formData.obiettivo_peso,\n      obiett_fianchi: formData.obiett_fianchi,\n      obiett_braccia: formData.obiett_vita,\n      obiett_cosce: formData.obiett_cosce,\n      obiett_vita: formData.obiett_vita,\n      obiett_spalle: formData.obiett_spalle,\n      obiett_torace: formData.obiett_torace,\n      obiett_testa: formData.obiett_testa,\n      obiett_collo: formData.obiett_collo\n    });\n    await setDoc(misureDocRef, {\n      carenze_vitam: formData.carenze_vitam,\n      acqua_intrace: formData.acqua_intrace,\n      acqua_extrace: formData.acqua_extrace,\n      massa_met_att: formData.massa_met_att,\n      met_basale: formData.met_basale,\n      massa_magra: formData.massa_magra,\n      massa_grassa: formData.massa_grassa,\n      angolo_bia: formData.angolo_bia,\n      obiett_acqua_intrace: formData.obiett_acqua_intrace,\n      obiett_acqua_extrace: formData.obiett_acqua_extrace,\n      obiett_massa_met_att: formData.obiett_massa_met_att,\n      obiett_met_basale: formData.obiett_met_basale,\n      obiett_massa_magra: formData.obiett_massa_magra,\n      obiett_massa_grassa: formData.obiett_massa_grassa,\n      obiett_angolo_bia: formData.obiett_angolo_bia\n    });\n    return {\n      success: true,\n      message: 'Paziente registrato con successo. Email inviata per la modifica della password.',\n      uidPatient\n    };\n  } catch (error) {\n    console.error('Errore durante la registrazione del paziente:', error.message);\n    return {\n      success: false,\n      message: error.message,\n      uidPatient: null\n    };\n    //throw error;\n  }\n}\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente Ã¨ giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\n_s(createPatient, \"lFaqcqpYfH+hD2+XWVfEsX3mhzk=\", false, function () {\n  return [useAuth];\n});\nexport async function updateTelephone(formData, email_paziente) {\n  await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n  await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\nexport async function getPatient(email_paziente) {\n  const docRef = doc(db, \"users\", email_paziente);\n  const docSnap = await getDoc(docRef);\n  if (docSnap.exists()) {\n    console.log(\"Documento letto correttamente \");\n    console.log(docSnap.data());\n    return docSnap.data();\n  } else {\n    console.log(\"Nessun documento trovato con il codice fiscale inserito!\");\n  }\n}","map":{"version":3,"names":["React","useEffect","useState","deleteDoc","doc","getDoc","setDoc","arrayUnion","updateDoc","db","auth","useAuth","fetchUser","crypto","require","generateRandomPassword","randomBytes","toString","createPatient","uidCurr","formData","_s","randomPassword","currentUID","localStorage","getItem","currentUser","patientUserCredential","createUserWithEmailAndPassword","email_paziente","uidPatient","user","uid","userDocRef","anagraficaDocRef","anamnesiDocRef","esamiDocRef","misureAntroDocRef","misureDocRef","nutrizionistaDocRef","nutrizionistaDoc","sendPasswordResetEmail","email","role","nutrizionistaId","exists","updateData","pazienti","console","log","cognome","cognome_paziente","nome","nome_paziente","sesso","sesso_paziente","data_nasc","data_nascita_paziente","luogo_nasc","luogo_nascita_paziente","prov_nasc","provincia_nasc_paziente","cf","codice_fiscale_paziente","luogo_resid","citta_resid_paziente","prov_resid","provincia_resid_paziente","via_resid","via_residenza_paziente","telefono","numero_telefono_paziente","ruolo","email_nutrizionista","note_anamnesi","esami_effettuati","esami_prescritti","peso_paziente","altezza_paziente","circ_fianchi","circ_braccia","circ_cosce","circ_vita","circ_spalle","circ_torace","circ_testa","circ_collo","obiettivo_peso","obiett_fianchi","obiett_braccia","obiett_vita","obiett_cosce","obiett_spalle","obiett_torace","obiett_testa","obiett_collo","carenze_vitam","acqua_intrace","acqua_extrace","massa_met_att","met_basale","massa_magra","massa_grassa","angolo_bia","obiett_acqua_intrace","obiett_acqua_extrace","obiett_massa_met_att","obiett_met_basale","obiett_massa_magra","obiett_massa_grassa","obiett_angolo_bia","success","message","error","updateTelephone","deleteDiet","getPatient","docRef","docSnap","data"],"sources":["/Users/angelamariaselvaggi/Desktop/unimeri/Tesi/Applicazione/APP MERI/src/context/PatientContext.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {deleteDoc, doc, getDoc, setDoc, arrayUnion, updateDoc} from \"firebase/firestore\";\nimport {db, auth} from \"../config/firebase-config\";\nimport {useAuth} from \"./AuthContext.js\";\nimport {fetchUser} from \"./UserContext.js\";\n\nconst crypto = require('crypto');\nexport function generateRandomPassword() {\n    return crypto.randomBytes(8).toString('hex');\n  }\n\nexport async function createPatient(uidCurr, formData) {\n      try {\n           // Genera una password casuale\n      const randomPassword = generateRandomPassword();\n      // Crea l'account con la password casuale\n      const currentUID = localStorage.getItem('user');\n      const {currentUser} = useAuth();\n      const patientUserCredential = await auth.createUserWithEmailAndPassword(formData.email_paziente, randomPassword);\n      const uidPatient = patientUserCredential.user.uid;\n      const userDocRef = doc(db, 'users', uidPatient);\n      const anagraficaDocRef = doc(db, 'users', uidPatient, 'anagrafica', uidPatient);\n      const anamnesiDocRef = doc(db, 'users', uidPatient, 'anamnesi', uidPatient);\n      const esamiDocRef = doc(db, 'users', uidPatient, 'esami', uidPatient);\n      const misureAntroDocRef = doc(db, 'users', uidPatient, 'misureantropometriche', uidPatient);\n      const misureDocRef = doc(db, 'users', uidPatient, 'misure', uidPatient);\n      const nutrizionistaDocRef = doc(db, \"users\", currentUser.uid);\n      const nutrizionistaDoc = await getDoc(nutrizionistaDocRef);\n      // Invia un'email al paziente con il link per la modifica della password\n      await auth.sendPasswordResetEmail(formData.email_paziente);\n     \n      // Salva il ruolo dell'utente come \"paziente\" nel database Firestore\n      await setDoc(userDocRef, {\n        email: formData.email_paziente,\n        role: 'Utente',\n        nutrizionistaId: uidCurr,\n        // Altri dati del paziente\n      });\n\n      if (nutrizionistaDoc.exists()) {\n        // Il documento esiste, aggiungi l'ID del paziente all'array \"pazienti\"\n        const updateData = {\n          pazienti: arrayUnion(uidPatient),\n        }\n        // Aggiorna il documento del nutrizionista con il nuovo campo\n        await updateDoc(nutrizionistaDocRef, updateData);\n        console.log(\"Campo pazienti aggiunto con successo al documento del nutrizionista!\");\n        } else {\n        // Il documento non esiste, potresti considerare di crearlo prima di aggiungere il campo pazienti\n        await setDoc(nutrizionistaDocRef, {\n            pazienti: [uidPatient], // Inizia con un array contenente solo l'ID del paziente\n            // Altri dati del nutrizionista\n        });\n\n        console.log(\"Documento del nutrizionista creato con successo!\");\n        }\n      await setDoc(anagraficaDocRef,{\n      cognome: formData.cognome_paziente,\n      nome: formData.nome_paziente,\n      sesso: formData.sesso_paziente,\n      data_nasc: formData.data_nascita_paziente,\n      luogo_nasc: formData.luogo_nascita_paziente,\n      prov_nasc: formData.provincia_nasc_paziente,\n      cf: formData.codice_fiscale_paziente,\n      luogo_resid: formData.citta_resid_paziente,\n      prov_resid: formData.provincia_resid_paziente,\n      via_resid: formData.via_residenza_paziente,\n      telefono: formData.numero_telefono_paziente,\n      email: formData.email_paziente,\n      ruolo: \"Utente\",\n      email_nutrizionista: currentUID, /*devo modificare currentUID con l'email*/\n      \n      });\n\n      await setDoc(anamnesiDocRef,{\n        note_anamnesi: formData.note_anamnesi,\n      });\n\n      await setDoc(esamiDocRef, {\n        esami_effettuati: formData.esami_effettuati,\n        esami_prescritti: formData.esami_prescritti,\n      });\n\n      await setDoc(misureAntroDocRef, {\n        peso_paziente: formData.peso_paziente,\n        altezza_paziente: formData.altezza_paziente,\n        circ_fianchi: formData.circ_fianchi,\n        circ_braccia: formData.circ_braccia,\n        circ_cosce: formData.circ_cosce,\n        circ_vita: formData.circ_vita,  \n        circ_spalle: formData.circ_spalle,\n        circ_torace: formData.circ_torace,\n        circ_testa: formData.circ_testa,\n        circ_collo: formData.circ_collo,\n        obiettivo_peso: formData.obiettivo_peso,\n        obiett_fianchi: formData.obiett_fianchi,\n        obiett_braccia: formData.obiett_vita,\n        obiett_cosce: formData.obiett_cosce,\n        obiett_vita: formData.obiett_vita,  \n        obiett_spalle: formData.obiett_spalle,\n        obiett_torace: formData.obiett_torace,\n        obiett_testa: formData.obiett_testa,\n        obiett_collo: formData.obiett_collo,\n      });\n\n      await setDoc(misureDocRef, {\n        carenze_vitam: formData.carenze_vitam,\n        acqua_intrace:formData.acqua_intrace,\n        acqua_extrace: formData.acqua_extrace,\n        massa_met_att: formData.massa_met_att,\n        met_basale: formData.met_basale,\n        massa_magra: formData.massa_magra,\n        massa_grassa: formData.massa_grassa,\n        angolo_bia: formData.angolo_bia,\n        obiett_acqua_intrace: formData.obiett_acqua_intrace,\n        obiett_acqua_extrace: formData.obiett_acqua_extrace,\n        obiett_massa_met_att: formData.obiett_massa_met_att,\n        obiett_met_basale: formData.obiett_met_basale,\n        obiett_massa_magra: formData.obiett_massa_magra,\n        obiett_massa_grassa: formData.obiett_massa_grassa,\n        obiett_angolo_bia: formData.obiett_angolo_bia,\n      });\n\n      return { success: true, message:'Paziente registrato con successo. Email inviata per la modifica della password.', uidPatient};\n    } catch (error) {\n      console.error('Errore durante la registrazione del paziente:', error.message);\n      return {success: false, message: error.message, uidPatient: null};\n      //throw error;\n  } \n}\n\n\n/*\n Funzione che si occupa di aggiornare i dati di un paziente memorizzata su Firestore Database\n */\n/*vedere se email_paziente Ã¨ giusto\n export async function updatePatient(formData, email_paziente) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n} */\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, email_paziente) {\n    await updateDoc(doc(db, \"users\", email_paziente), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(email_paziente) {\n    await deleteDoc(doc(db, \"users\", email_paziente));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\n export async function getPatient(email_paziente) {\n    const docRef = doc(db, \"users\", email_paziente);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n        console.log(\"Documento letto correttamente \");\n        console.log(docSnap.data());\n        return docSnap.data();\n    } else {\n        console.log((\"Nessun documento trovato con il codice fiscale inserito!\"));\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { doc, getDoc, getDocs, setDoc, updateDoc, collection, query, where } from \"firebase/firestore\";\nimport { auth, db } from \"../config/firebase-config\";\nexport async function signUpUser(email, password, nome, cognome, sesso, telefono, cf, data_nasc, luogo_nasc, prov_nasc, luogo_resid, prov_resid, via_resid, ruolo) {\n  try {\n    const userCredential = await auth.createUserWithEmailAndPassword(email, password);\n    const uid = userCredential.user.uid;\n    const userDocRef = doc(db, \"users\", uid);\n    const anagraficaDocRef = doc(db, \"users\", uid, \"anagrafica\", uid);\n    await setDoc(userDocRef, {\n      email: email,\n      nome: nome,\n      ruolo: ruolo\n    });\n    localStorage.setItem(\"user\", nome);\n    localStorage.setItem(\"role\", ruolo);\n    await setDoc(anagraficaDocRef, {\n      cognome: cognome,\n      nome: nome,\n      sesso: sesso,\n      data_nasc: data_nasc,\n      luogo_nasc: luogo_nasc,\n      prov_nasc: prov_nasc,\n      cf: cf,\n      luogo_resid: luogo_resid,\n      prov_resid: prov_resid,\n      via_resid: via_resid,\n      telefono: telefono,\n      email: email,\n      ruolo: ruolo\n    });\n    return {\n      success: true,\n      message: \"Registrazione completata con successo\"\n    };\n  } catch (error) {\n    console.error(\"Errore durante la registrazione dell'utente:\", error.message);\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n}\nexport async function fetchUser(uid) {\n  try {\n    const anagraficaDocRef = doc(db, \"users\", uid, \"anagrafica\", uid);\n    const docSnap = await getDoc(anagraficaDocRef);\n    if (docSnap.exists()) {\n      return docSnap.data();\n    } else {\n      console.log(\"Nessun documento trovato con l'UID inserito nella collezione 'anagrafica'!\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Errore durante la lettura dei dati:\", error);\n    return null;\n  }\n}\nexport async function fetchUsersWithDiets(currentUser) {\n  try {\n    const userID = signUpUser().uid;\n    const userDocRef = doc(db, \"users\", userID);\n    const userDocSnapshot = await getDoc(userDocRef);\n    if (userDocSnapshot.exists()) {\n      const nutrizionista = userDocSnapshot.data();\n      const userPazienti = nutrizionista.pazienti || [];\n      const patientsData = [];\n      for (const uid of userPazienti) {\n        const dietsQuery = query(collection(db, \"diets\"), where(\"uid\", \"==\", uid));\n        const dietsQuerySnapshot = await getDocs(dietsQuery);\n        if (!dietsQuerySnapshot.empty) {\n          const patientDocRef = doc(db, \"users\", uid, \"anagrafica\", uid);\n          try {\n            const patientDocSnapshot = await getDoc(patientDocRef);\n            if (patientDocSnapshot.exists()) {\n              const patientData = patientDocSnapshot.data();\n              patientsData.push(patientData);\n            }\n          } catch (error) {\n            console.error(\"Errore durante la query del paziente:\", error.message);\n          }\n        }\n      }\n      return patientsData;\n    } else {\n      console.log(\"Nessun nutrizionista trovato con l'email corrente\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Errore durante la query degli utenti:\", error.message);\n    return null;\n  }\n}\nexport async function updateUser(uid, nome, cognome, sesso, data_nasc, luogo_nasc, prov_nasc, cf, luogo_resid, prov_resid, via_resid, telefono, email) {\n  const anagraficaDocRef = doc(db, \"users\", uid, \"anagrafica\", uid);\n  try {\n    const docSnap = await getDoc(anagraficaDocRef);\n    if (docSnap.exists()) {\n      await updateDoc(anagraficaDocRef, {\n        cognome: cognome,\n        nome: nome,\n        sesso: sesso,\n        data_nasc: data_nasc,\n        luogo_nasc: luogo_nasc,\n        prov_nasc: prov_nasc,\n        cf: cf,\n        luogo_resid: luogo_resid,\n        prov_resid: prov_resid,\n        via_resid: via_resid,\n        telefono: telefono,\n        email: email\n      });\n      return {\n        success: true,\n        message: \"Aggiornamento completato con successo\"\n      };\n    } else {\n      return {\n        success: false,\n        message: \"Il documento dell'anagrafica non esiste\"\n      };\n    }\n  } catch (error) {\n    console.error(\"Errore durante l'aggiornamento dei dati:\", error);\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n}","map":{"version":3,"names":["doc","getDoc","getDocs","setDoc","updateDoc","collection","query","where","auth","db","signUpUser","email","password","nome","cognome","sesso","telefono","cf","data_nasc","luogo_nasc","prov_nasc","luogo_resid","prov_resid","via_resid","ruolo","userCredential","createUserWithEmailAndPassword","uid","user","userDocRef","anagraficaDocRef","localStorage","setItem","success","message","error","console","fetchUser","docSnap","exists","data","log","fetchUsersWithDiets","currentUser","userID","userDocSnapshot","nutrizionista","userPazienti","pazienti","patientsData","dietsQuery","dietsQuerySnapshot","empty","patientDocRef","patientDocSnapshot","patientData","push","updateUser"],"sources":["/Users/angelamariaselvaggi/Desktop/unimeri/Tesi/Applicazione/APP MERI/src/context/UserContext.js"],"sourcesContent":["import {\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  updateDoc,\n  collection,\n  query,\n  where,\n} from \"firebase/firestore\";\nimport { auth, db } from \"../config/firebase-config\";\n\nexport async function signUpUser(\n  email,\n  password,\n  nome,\n  cognome,\n  sesso,\n  telefono,\n  cf,\n  data_nasc,\n  luogo_nasc,\n  prov_nasc,\n  luogo_resid,\n  prov_resid,\n  via_resid,\n  ruolo\n) {\n  try {\n    const userCredential = await auth.createUserWithEmailAndPassword(\n      email,\n      password\n    );\n    const uid = userCredential.user.uid;\n\n    const userDocRef = doc(db, \"users\", uid);\n    const anagraficaDocRef = doc(db, \"users\", uid, \"anagrafica\", uid);\n\n    await setDoc(userDocRef, {\n      email: email,\n      nome: nome,\n      ruolo: ruolo,\n    });\n\n    localStorage.setItem(\"user\", nome);\n    localStorage.setItem(\"role\", ruolo);\n\n    await setDoc(anagraficaDocRef, {\n      cognome: cognome,\n      nome: nome,\n      sesso: sesso,\n      data_nasc: data_nasc,\n      luogo_nasc: luogo_nasc,\n      prov_nasc: prov_nasc,\n      cf: cf,\n      luogo_resid: luogo_resid,\n      prov_resid: prov_resid,\n      via_resid: via_resid,\n      telefono: telefono,\n      email: email,\n      ruolo: ruolo,\n    });\n\n    return { success: true, message: \"Registrazione completata con successo\" };\n  } catch (error) {\n    console.error(\"Errore durante la registrazione dell'utente:\", error.message);\n    return { success: false, message: error.message };\n  }\n}\n\nexport async function fetchUser(uid) {\n  try {\n    const anagraficaDocRef = doc(db, \"users\", uid, \"anagrafica\", uid);\n    const docSnap = await getDoc(anagraficaDocRef);\n\n    if (docSnap.exists()) {\n      return docSnap.data();\n    } else {\n      console.log(\n        \"Nessun documento trovato con l'UID inserito nella collezione 'anagrafica'!\"\n      );\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Errore durante la lettura dei dati:\", error);\n    return null;\n  }\n}\n\nexport async function fetchUsersWithDiets(currentUser) {\n  try {\n    const userID = signUpUser().uid;\n    const userDocRef = doc(db, \"users\", userID);\n    const userDocSnapshot = await getDoc(userDocRef);\n\n    if (userDocSnapshot.exists()) {\n      const nutrizionista = userDocSnapshot.data();\n      const userPazienti = nutrizionista.pazienti || [];\n\n      const patientsData = [];\n\n      for (const uid of userPazienti) {\n        const dietsQuery = query(collection(db, \"diets\"), where(\"uid\", \"==\", uid));\n        const dietsQuerySnapshot = await getDocs(dietsQuery);\n\n        if (!dietsQuerySnapshot.empty) {\n          const patientDocRef = doc(db, \"users\", uid, \"anagrafica\", uid);\n\n          try {\n            const patientDocSnapshot = await getDoc(patientDocRef);\n\n            if (patientDocSnapshot.exists()) {\n              const patientData = patientDocSnapshot.data();\n              patientsData.push(patientData);\n            }\n          } catch (error) {\n            console.error(\"Errore durante la query del paziente:\", error.message);\n          }\n        }\n      }\n\n      return patientsData;\n    } else {\n      console.log(\"Nessun nutrizionista trovato con l'email corrente\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Errore durante la query degli utenti:\", error.message);\n    return null;\n  }\n}\n\nexport async function updateUser(\n  uid,\n  nome,\n  cognome,\n  sesso,\n  data_nasc,\n  luogo_nasc,\n  prov_nasc,\n  cf,\n  luogo_resid,\n  prov_resid,\n  via_resid,\n  telefono,\n  email\n) {\n  const anagraficaDocRef = doc(db, \"users\", uid, \"anagrafica\", uid);\n\n  try {\n    const docSnap = await getDoc(anagraficaDocRef);\n\n    if (docSnap.exists()) {\n      await updateDoc(anagraficaDocRef, {\n        cognome: cognome,\n        nome: nome,\n        sesso: sesso,\n        data_nasc: data_nasc,\n        luogo_nasc: luogo_nasc,\n        prov_nasc: prov_nasc,\n        cf: cf,\n        luogo_resid: luogo_resid,\n        prov_resid: prov_resid,\n        via_resid: via_resid,\n        telefono: telefono,\n        email: email,\n      });\n\n      return { success: true, message: \"Aggiornamento completato con successo\" };\n    } else {\n      return { success: false, message: \"Il documento dell'anagrafica non esiste\" };\n    }\n  } catch (error) {\n    console.error(\"Errore durante l'aggiornamento dei dati:\", error);\n    return { success: false, message: error.message };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
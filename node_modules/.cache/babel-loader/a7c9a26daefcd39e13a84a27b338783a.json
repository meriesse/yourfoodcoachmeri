{"ast":null,"code":"import { collection, deleteDoc, doc, getDoc, serverTimestamp, setDoc, updateDoc, query, where, getDocs } from \"firebase/firestore\";\nimport { db } from \"../config/firebase-config\";\n\n/*\n Funzione che si occupa di memorizzare i dati di una dieta su Firestore Database\n */\nexport async function addDiet(formData, nutrizionista) {\n  formData.data_inserimento = serverTimestamp();\n  formData.email_nutrizionista = nutrizionista.email;\n  formData.numero_telefono_nutrizionista = nutrizionista.telefono;\n  formData.tipologia_dieta = nutrizionista.ruolo;\n  await setDoc(doc(collection(db, \"diets\")), formData);\n}\n\n/*\n Funzione che si occupa di aggiornare i dati di una dieta memorizzata su Firestore Database\n */\nexport async function updateDiet(formData, id) {\n  formData.data_inserimento = serverTimestamp();\n  await updateDoc(doc(db, \"diets\", id), formData);\n}\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, id) {\n  await updateDoc(doc(db, \"diets\", id), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(id) {\n  await deleteDoc(doc(db, \"diets\", id));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\nexport async function getDiet(id) {\n  const docRef = doc(db, \"diets\", id);\n  const docSnap = await getDoc(docRef);\n  if (docSnap.exists()) {\n    console.log(\"Documento letto correttamente \");\n    console.log(docSnap.data());\n    return docSnap.data();\n  } else {\n    console.log(\"Nessun documento trovato con il codice fiscale inserito!\");\n  }\n}\nexport const fetchUsersWithDiets = async nutrizionistaUid => {\n  try {\n    const userDocRef = doc(db, \"users\", nutrizionistaUid);\n    const userDocSnapshot = await getDoc(userDocRef);\n    if (userDocSnapshot.exists()) {\n      const nutrizionista = userDocSnapshot.data();\n      const userPazienti = nutrizionista.pazienti || [];\n      const patientsData = [];\n      for (const userId of userPazienti) {\n        const dietsQuery = query(collection(db, \"diets\"), where(\"uid\", \"==\", userId), where(\"fine_dieta\", \"<=\", new Date()));\n        const dietsQuerySnapshot = await getDoc(dietsQuery);\n        if (!dietsQuerySnapshot.empty) {\n          const patientDocRef = doc(db, \"users\", userId, \"anagrafica\", userId);\n          const patientDocSnapshot = await getDoc(patientDocRef);\n\n          // Aggiungi la query per ottenere le diete del paziente\n          const dietsQuery = query(collection(db, \"diets\"), where(\"uid\", \"==\", userId));\n          const dietsQuerySnapshot = await getDocs(dietsQuery);\n          if (patientDocSnapshot.exists()) {\n            const patientData = patientDocSnapshot.data();\n            patientsData.push(patientData);\n          }\n        }\n      }\n      return patientsData;\n    } else {\n      console.log(\"Nessun nutrizionista trovato con l'UID fornito\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Errore durante la query degli utenti:\", error.message);\n    return null;\n  }\n};\n/*\n Funzione che si occupa di codificare l'url della richiesta ricevuto il pasto in input\n */\nexport const urlEncoded = arr => {\n  const regex = /,/gi;\n  if (Array.isArray(arr)) {\n    return arr.join(\",\").replace(regex, \" and \");\n  } else {\n    return arr.split(\" \").join(\"%20\");\n  }\n};","map":{"version":3,"names":["collection","deleteDoc","doc","getDoc","serverTimestamp","setDoc","updateDoc","query","where","getDocs","db","addDiet","formData","nutrizionista","data_inserimento","email_nutrizionista","email","numero_telefono_nutrizionista","telefono","tipologia_dieta","ruolo","updateDiet","id","updateTelephone","deleteDiet","getDiet","docRef","docSnap","exists","console","log","data","fetchUsersWithDiets","nutrizionistaUid","userDocRef","userDocSnapshot","userPazienti","pazienti","patientsData","userId","dietsQuery","Date","dietsQuerySnapshot","empty","patientDocRef","patientDocSnapshot","patientData","push","error","message","urlEncoded","arr","regex","Array","isArray","join","replace","split"],"sources":["/Users/angelamariaselvaggi/Desktop/unimeri/Tesi/Applicazione/APP MERI/src/context/DietContext.js"],"sourcesContent":["import {collection, deleteDoc, doc, getDoc, serverTimestamp, setDoc, updateDoc, query, where, getDocs} from \"firebase/firestore\";\nimport {db} from \"../config/firebase-config\";\n\n\n/*\n Funzione che si occupa di memorizzare i dati di una dieta su Firestore Database\n */\nexport async function addDiet(formData, nutrizionista) {\n    formData.data_inserimento = serverTimestamp();\n    formData.email_nutrizionista = nutrizionista.email;\n    formData.numero_telefono_nutrizionista = nutrizionista.telefono;\n    formData.tipologia_dieta = nutrizionista.ruolo;\n    await setDoc(doc(collection(db, \"diets\")), formData);\n}\n\n/*\n Funzione che si occupa di aggiornare i dati di una dieta memorizzata su Firestore Database\n */\nexport async function updateDiet(formData, id) {\n    formData.data_inserimento = serverTimestamp();\n    await updateDoc(doc(db, \"diets\", id), formData);\n}\n\n/*\n Funzione che si occupa di aggiornare il numero di telefono del nutrizionista su Firestore Database\n */\nexport async function updateTelephone(formData, id) {\n    await updateDoc(doc(db, \"diets\", id), formData);\n}\n\n/*\n Funzione che si occupa di eliminare una dieta memorizzata su Firestore Database\n */\nexport async function deleteDiet(id) {\n    await deleteDoc(doc(db, \"diets\", id));\n}\n\n/*\n Funzione che si occupa di ottenere i dati di una dieta memorizzata su Firestore Database\n */\nexport async function getDiet(id) {\n    const docRef = doc(db, \"diets\", id);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n        console.log(\"Documento letto correttamente \");\n        console.log(docSnap.data());\n        return docSnap.data();\n    } else {\n        console.log((\"Nessun documento trovato con il codice fiscale inserito!\"));\n    }\n}\nexport const fetchUsersWithDiets = async (nutrizionistaUid) => {\n    try {\n      const userDocRef = doc(db, \"users\", nutrizionistaUid);\n      const userDocSnapshot = await getDoc(userDocRef);\n  \n      if (userDocSnapshot.exists()) {\n        const nutrizionista = userDocSnapshot.data();\n        const userPazienti = nutrizionista.pazienti || [];\n  \n        const patientsData = [];\n  \n        for (const userId of userPazienti) {\n            const dietsQuery = query(\n                collection(db, \"diets\"),\n                where(\"uid\", \"==\", userId),\n                where(\"fine_dieta\", \"<=\", new Date())\n              );\n\n            const dietsQuerySnapshot = await getDoc(dietsQuery);\n  \n            if (!dietsQuerySnapshot.empty) {\n                const patientDocRef = doc(db, \"users\", userId, \"anagrafica\", userId);\n                const patientDocSnapshot = await getDoc(patientDocRef);\n      \n  \n              // Aggiungi la query per ottenere le diete del paziente\n              const dietsQuery = query(collection(db, \"diets\"), where(\"uid\", \"==\", userId));\n              const dietsQuerySnapshot = await getDocs(dietsQuery);\n  \n              if (patientDocSnapshot.exists()) {\n                const patientData = patientDocSnapshot.data();\n                patientsData.push(patientData);\n              }\n            }\n          }\n          return patientsData;\n        } else {\n          console.log(\"Nessun nutrizionista trovato con l'UID fornito\");\n          return null;\n        }\n      } catch (error) {\n        console.error(\"Errore durante la query degli utenti:\", error.message);\n        return null;\n      }\n    };\n/*\n Funzione che si occupa di codificare l'url della richiesta ricevuto il pasto in input\n */\nexport const urlEncoded = arr => {\n    const regex = /,/gi;\n    if (Array.isArray(arr)) {\n        return arr.join(\",\").replace(regex, \" and \");\n    } else {\n        return arr.split(\" \").join(\"%20\");\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}